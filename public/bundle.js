/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/*! exports provided: EPSILON, ARRAY_TYPE, RANDOM, setMatrixArrayType, toRadian, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EPSILON\", function() { return EPSILON; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ARRAY_TYPE\", function() { return ARRAY_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RANDOM\", function() { return RANDOM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setMatrixArrayType\", function() { return setMatrixArrayType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toRadian\", function() { return toRadian; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/common.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/index.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/index.js ***!
  \*********************************************/
/*! exports provided: glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"glMatrix\", function() { return _common_js__WEBPACK_IMPORTED_MODULE_0__; });\n/* harmony import */ var _mat2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat2.js */ \"./node_modules/gl-matrix/esm/mat2.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat2\", function() { return _mat2_js__WEBPACK_IMPORTED_MODULE_1__; });\n/* harmony import */ var _mat2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat2d.js */ \"./node_modules/gl-matrix/esm/mat2d.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat2d\", function() { return _mat2d_js__WEBPACK_IMPORTED_MODULE_2__; });\n/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ \"./node_modules/gl-matrix/esm/mat3.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat3\", function() { return _mat3_js__WEBPACK_IMPORTED_MODULE_3__; });\n/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mat4.js */ \"./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"mat4\", function() { return _mat4_js__WEBPACK_IMPORTED_MODULE_4__; });\n/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quat.js */ \"./node_modules/gl-matrix/esm/quat.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"quat\", function() { return _quat_js__WEBPACK_IMPORTED_MODULE_5__; });\n/* harmony import */ var _quat2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quat2.js */ \"./node_modules/gl-matrix/esm/quat2.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"quat2\", function() { return _quat2_js__WEBPACK_IMPORTED_MODULE_6__; });\n/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vec2.js */ \"./node_modules/gl-matrix/esm/vec2.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"vec2\", function() { return _vec2_js__WEBPACK_IMPORTED_MODULE_7__; });\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vec3.js */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"vec3\", function() { return _vec3_js__WEBPACK_IMPORTED_MODULE_8__; });\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./vec4.js */ \"./node_modules/gl-matrix/esm/vec4.js\");\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"vec4\", function() { return _vec4_js__WEBPACK_IMPORTED_MODULE_9__; });\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/index.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2.js ***!
  \********************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, transpose, invert, adjoint, determinant, multiply, rotate, scale, fromRotation, fromScaling, str, frob, LDU, add, subtract, exactEquals, equals, multiplyScalar, multiplyScalarAndAdd, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transpose\", function() { return transpose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjoint\", function() { return adjoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LDU\", function() { return LDU; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nfunction fromValues(m00, m01, m10, m11) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nfunction set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nfunction adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nfunction scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nfunction LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/mat2.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2d.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2d.js ***!
  \*********************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, invert, determinant, multiply, rotate, scale, translate, fromRotation, fromScaling, fromTranslation, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](6);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nfunction fromValues(a, b, c, d, tx, ty) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nfunction set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nfunction invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nfunction scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nfunction translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/mat2d.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat3.js ***!
  \********************************************/
/*! exports provided: create, fromMat4, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, rotate, scale, fromTranslation, fromRotation, fromScaling, fromMat2d, fromQuat, normalFromMat4, projection, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat4\", function() { return fromMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transpose\", function() { return transpose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjoint\", function() { return adjoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat2d\", function() { return fromMat2d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromQuat\", function() { return fromQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalFromMat4\", function() { return normalFromMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"projection\", function() { return projection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](9);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nfunction translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nfunction normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/mat3.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/*! exports provided: create, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, scale, rotate, rotateX, rotateY, rotateZ, fromTranslation, fromScaling, fromRotation, fromXRotation, fromYRotation, fromZRotation, fromRotationTranslation, fromQuat2, getTranslation, getScaling, getRotation, fromRotationTranslationScale, fromRotationTranslationScaleOrigin, fromQuat, frustum, perspective, perspectiveFromFieldOfView, ortho, lookAt, targetTo, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transpose\", function() { return transpose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjoint\", function() { return adjoint; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"determinant\", function() { return determinant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromScaling\", function() { return fromScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromXRotation\", function() { return fromXRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromYRotation\", function() { return fromYRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromZRotation\", function() { return fromZRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslation\", function() { return fromRotationTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromQuat2\", function() { return fromQuat2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTranslation\", function() { return getTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getScaling\", function() { return getScaling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRotation\", function() { return getRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslationScale\", function() { return fromRotationTranslationScale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslationScaleOrigin\", function() { return fromRotationTranslationScaleOrigin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromQuat\", function() { return fromQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frustum\", function() { return frustum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"perspective\", function() { return perspective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"perspectiveFromFieldOfView\", function() { return perspectiveFromFieldOfView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ortho\", function() { return ortho; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lookAt\", function() { return lookAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"targetTo\", function() { return targetTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"frob\", function() { return frob; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalar\", function() { return multiplyScalar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiplyScalarAndAdd\", function() { return multiplyScalarAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](16);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nfunction getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nfunction perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/mat4.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat.js ***!
  \********************************************/
/*! exports provided: create, identity, setAxisAngle, getAxisAngle, multiply, rotateX, rotateY, rotateZ, calculateW, slerp, random, invert, conjugate, fromMat3, fromEuler, str, clone, fromValues, copy, set, add, mul, scale, dot, lerp, length, len, squaredLength, sqrLen, normalize, exactEquals, equals, rotationTo, sqlerp, setAxes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setAxisAngle\", function() { return setAxisAngle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAxisAngle\", function() { return getAxisAngle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateW\", function() { return calculateW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"slerp\", function() { return slerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conjugate\", function() { return conjugate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat3\", function() { return fromMat3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromEuler\", function() { return fromEuler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotationTo\", function() { return rotationTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqlerp\", function() { return sqlerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setAxes\", function() { return setAxes; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat3.js */ \"./node_modules/gl-matrix/esm/mat3.js\");\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vec4.js */ \"./node_modules/gl-matrix/esm/vec4.js\");\n\n\n\n\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nfunction getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nfunction multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nfunction calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nfunction random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]();\n  var u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]();\n  var u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nvar clone = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"clone\"];\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nvar fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"fromValues\"];\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar copy = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"copy\"];\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar set = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"set\"];\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar add = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"add\"];\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar scale = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"scale\"];\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nvar dot = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"dot\"];\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"lerp\"];\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nvar length = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"length\"];\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nvar squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"squaredLength\"];\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"normalize\"];\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nvar exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"exactEquals\"];\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nvar equals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__[\"equals\"];\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nvar rotationTo = function () {\n  var tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"create\"]();\n  var xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"fromValues\"](1, 0, 0);\n  var yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"fromValues\"](0, 1, 0);\n  return function (out, a, b) {\n    var dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"dot\"](a, b);\n\n    if (dot < -0.999999) {\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"cross\"](tmpvec3, xUnitVec3, a);\n      if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"len\"](tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"cross\"](tmpvec3, yUnitVec3, a);\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"normalize\"](tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__[\"cross\"](tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nvar sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nvar setAxes = function () {\n  var matr = _mat3_js__WEBPACK_IMPORTED_MODULE_1__[\"create\"]();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/quat.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat2.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat2.js ***!
  \*********************************************/
/*! exports provided: create, clone, fromValues, fromRotationTranslationValues, fromRotationTranslation, fromTranslation, fromRotation, fromMat4, copy, identity, set, getReal, getDual, setReal, setDual, getTranslation, translate, rotateX, rotateY, rotateZ, rotateByQuatAppend, rotateByQuatPrepend, rotateAroundAxis, add, multiply, mul, scale, dot, lerp, invert, conjugate, length, len, squaredLength, sqrLen, normalize, str, exactEquals, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslationValues\", function() { return fromRotationTranslationValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotationTranslation\", function() { return fromRotationTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromTranslation\", function() { return fromTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromRotation\", function() { return fromRotation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromMat4\", function() { return fromMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getReal\", function() { return getReal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDual\", function() { return getDual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setReal\", function() { return setReal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setDual\", function() { return setDual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTranslation\", function() { return getTranslation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"translate\", function() { return translate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateByQuatAppend\", function() { return rotateByQuatAppend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateByQuatPrepend\", function() { return rotateByQuatPrepend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateAroundAxis\", function() { return rotateAroundAxis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invert\", function() { return invert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conjugate\", function() { return conjugate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quat.js */ \"./node_modules/gl-matrix/esm/quat.js\");\n/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat4.js */ \"./node_modules/gl-matrix/esm/mat4.js\");\n\n\n\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nfunction create() {\n  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nfunction clone(a) {\n  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nfunction fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nfunction fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nfunction fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nfunction fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nfunction fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nfunction fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"create\"]();\n  _mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"getRotation\"](outer, a);\n  var t = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\n  _mat4_js__WEBPACK_IMPORTED_MODULE_2__[\"getTranslation\"](t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nvar getReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"copy\"];\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nfunction getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nvar setReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"copy\"];\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nfunction getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nfunction translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"rotateX\"](out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"rotateY\"](out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"rotateZ\"](out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nfunction rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nfunction rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nfunction rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"]) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nfunction multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nvar dot = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"dot\"];\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nfunction invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nvar length = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"length\"];\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nvar squaredLength = _quat_js__WEBPACK_IMPORTED_MODULE_1__[\"squaredLength\"];\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nfunction normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nfunction str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/quat2.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat2, transformMat2d, transformMat3, transformMat4, rotate, angle, zero, str, exactEquals, equals, len, sub, mul, div, dist, sqrDist, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ceil\", function() { return ceil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"floor\", function() { return floor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleAndAdd\", function() { return scaleAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverse\", function() { return inverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat2\", function() { return transformMat2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat2d\", function() { return transformMat2d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat3\", function() { return transformMat3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat4\", function() { return transformMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotate\", function() { return rotate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zero\", function() { return zero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](2);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction fromValues(x, y) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nfunction rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/vec2.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/*! exports provided: create, clone, length, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, squaredLength, negate, inverse, normalize, dot, cross, lerp, hermite, bezier, random, transformMat4, transformMat3, transformQuat, rotateX, rotateY, rotateZ, angle, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ceil\", function() { return ceil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"floor\", function() { return floor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleAndAdd\", function() { return scaleAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverse\", function() { return inverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hermite\", function() { return hermite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bezier\", function() { return bezier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat4\", function() { return transformMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat3\", function() { return transformMat3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformQuat\", function() { return transformQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateX\", function() { return rotateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateY\", function() { return rotateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotateZ\", function() { return rotateZ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angle\", function() { return angle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zero\", function() { return zero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction fromValues(x, y, z) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2.0 * Math.PI;\n  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nfunction rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nfunction rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nfunction rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/vec3.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec4.js ***!
  \********************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat4, transformQuat, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"create\", function() { return create; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subtract\", function() { return subtract; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"multiply\", function() { return multiply; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"divide\", function() { return divide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ceil\", function() { return ceil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"floor\", function() { return floor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"min\", function() { return min; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"max\", function() { return max; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"round\", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scaleAndAdd\", function() { return scaleAndAdd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distance\", function() { return distance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredDistance\", function() { return squaredDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"negate\", function() { return negate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inverse\", function() { return inverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cross\", function() { return cross; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformMat4\", function() { return transformMat4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformQuat\", function() { return transformQuat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"zero\", function() { return zero; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"str\", function() { return str; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"] != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction fromValues(x, y, z, w) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__[\"ARRAY_TYPE\"](4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nfunction set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nfunction cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\n    v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\n    v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__[\"RANDOM\"]() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack:///./node_modules/gl-matrix/esm/vec4.js?");

/***/ }),

/***/ "./src/geometry/sphere.ts":
/*!********************************!*\
  !*** ./src/geometry/sphere.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Sphere.003\r\nexports.Sphere = [\r\n    0.0,\r\n    0.1951,\r\n    0.9808,\r\n    0.0,\r\n    0.3827,\r\n    0.9239,\r\n    0.0,\r\n    0.5556,\r\n    0.8315,\r\n    0.0,\r\n    0.7071,\r\n    0.7071,\r\n    0.0,\r\n    0.8315,\r\n    0.5556,\r\n    0.0,\r\n    0.9239,\r\n    0.3827,\r\n    0.0,\r\n    0.9808,\r\n    0.1951,\r\n    0.0,\r\n    1.0,\r\n    0.0,\r\n    0.0,\r\n    0.9808,\r\n    -0.1951,\r\n    0.0,\r\n    0.5556,\r\n    -0.8315,\r\n    0.0381,\r\n    0.1913,\r\n    0.9808,\r\n    0.0747,\r\n    0.3753,\r\n    0.9239,\r\n    0.1084,\r\n    0.5449,\r\n    0.8315,\r\n    0.1379,\r\n    0.6935,\r\n    0.7071,\r\n    0.1622,\r\n    0.8155,\r\n    0.5556,\r\n    0.1802,\r\n    0.9061,\r\n    0.3827,\r\n    0.1913,\r\n    0.9619,\r\n    0.1951,\r\n    0.1951,\r\n    0.9808,\r\n    0.0,\r\n    0.1913,\r\n    0.9619,\r\n    -0.1951,\r\n    0.1802,\r\n    0.9061,\r\n    -0.3827,\r\n    0.1622,\r\n    0.8155,\r\n    -0.5556,\r\n    0.1379,\r\n    0.6935,\r\n    -0.7071,\r\n    0.1084,\r\n    0.5449,\r\n    -0.8315,\r\n    0.0747,\r\n    0.3753,\r\n    -0.9239,\r\n    0.0381,\r\n    0.1913,\r\n    -0.9808,\r\n    0.0747,\r\n    0.1802,\r\n    0.9808,\r\n    0.1464,\r\n    0.3536,\r\n    0.9239,\r\n    0.2126,\r\n    0.5133,\r\n    0.8315,\r\n    0.2706,\r\n    0.6533,\r\n    0.7071,\r\n    0.3182,\r\n    0.7682,\r\n    0.5556,\r\n    0.3536,\r\n    0.8536,\r\n    0.3827,\r\n    0.3753,\r\n    0.9061,\r\n    0.1951,\r\n    0.3827,\r\n    0.9239,\r\n    0.0,\r\n    0.3753,\r\n    0.9061,\r\n    -0.1951,\r\n    0.3536,\r\n    0.8536,\r\n    -0.3827,\r\n    0.3182,\r\n    0.7682,\r\n    -0.5556,\r\n    0.2706,\r\n    0.6533,\r\n    -0.7071,\r\n    0.2126,\r\n    0.5133,\r\n    -0.8315,\r\n    0.1464,\r\n    0.3536,\r\n    -0.9239,\r\n    0.0747,\r\n    0.1802,\r\n    -0.9808,\r\n    0.1084,\r\n    0.1622,\r\n    0.9808,\r\n    0.2126,\r\n    0.3182,\r\n    0.9239,\r\n    0.3087,\r\n    0.4619,\r\n    0.8315,\r\n    0.3928,\r\n    0.5879,\r\n    0.7071,\r\n    0.4619,\r\n    0.6913,\r\n    0.5556,\r\n    0.5133,\r\n    0.7682,\r\n    0.3827,\r\n    0.5449,\r\n    0.8155,\r\n    0.1951,\r\n    0.5556,\r\n    0.8315,\r\n    0.0,\r\n    0.5449,\r\n    0.8155,\r\n    -0.1951,\r\n    0.5133,\r\n    0.7682,\r\n    -0.3827,\r\n    0.4619,\r\n    0.6913,\r\n    -0.5556,\r\n    0.3928,\r\n    0.5879,\r\n    -0.7071,\r\n    0.3087,\r\n    0.4619,\r\n    -0.8315,\r\n    0.2126,\r\n    0.3182,\r\n    -0.9239,\r\n    0.1084,\r\n    0.1622,\r\n    -0.9808,\r\n    0.1379,\r\n    0.1379,\r\n    0.9808,\r\n    0.2706,\r\n    0.2706,\r\n    0.9239,\r\n    0.3928,\r\n    0.3928,\r\n    0.8315,\r\n    0.5,\r\n    0.5,\r\n    0.7071,\r\n    0.5879,\r\n    0.5879,\r\n    0.5556,\r\n    0.6533,\r\n    0.6533,\r\n    0.3827,\r\n    0.6935,\r\n    0.6935,\r\n    0.1951,\r\n    0.7071,\r\n    0.7071,\r\n    0.0,\r\n    0.6935,\r\n    0.6935,\r\n    -0.1951,\r\n    0.6533,\r\n    0.6533,\r\n    -0.3827,\r\n    0.5879,\r\n    0.5879,\r\n    -0.5556,\r\n    0.5,\r\n    0.5,\r\n    -0.7071,\r\n    0.3928,\r\n    0.3928,\r\n    -0.8315,\r\n    0.2706,\r\n    0.2706,\r\n    -0.9239,\r\n    0.1379,\r\n    0.1379,\r\n    -0.9808,\r\n    0.1622,\r\n    0.1084,\r\n    0.9808,\r\n    0.3182,\r\n    0.2126,\r\n    0.9239,\r\n    0.4619,\r\n    0.3087,\r\n    0.8315,\r\n    0.5879,\r\n    0.3928,\r\n    0.7071,\r\n    0.6913,\r\n    0.4619,\r\n    0.5556,\r\n    0.7682,\r\n    0.5133,\r\n    0.3827,\r\n    0.8155,\r\n    0.5449,\r\n    0.1951,\r\n    0.8315,\r\n    0.5556,\r\n    0.0,\r\n    0.8155,\r\n    0.5449,\r\n    -0.1951,\r\n    0.7682,\r\n    0.5133,\r\n    -0.3827,\r\n    0.6913,\r\n    0.4619,\r\n    -0.5556,\r\n    0.5879,\r\n    0.3928,\r\n    -0.7071,\r\n    0.4619,\r\n    0.3087,\r\n    -0.8315,\r\n    0.3182,\r\n    0.2126,\r\n    -0.9239,\r\n    0.1622,\r\n    0.1084,\r\n    -0.9808,\r\n    0.1802,\r\n    0.0747,\r\n    0.9808,\r\n    0.3536,\r\n    0.1464,\r\n    0.9239,\r\n    0.5133,\r\n    0.2126,\r\n    0.8315,\r\n    0.6533,\r\n    0.2706,\r\n    0.7071,\r\n    0.7682,\r\n    0.3182,\r\n    0.5556,\r\n    0.8536,\r\n    0.3536,\r\n    0.3827,\r\n    0.9061,\r\n    0.3753,\r\n    0.1951,\r\n    0.9239,\r\n    0.3827,\r\n    0.0,\r\n    0.9061,\r\n    0.3753,\r\n    -0.1951,\r\n    0.8536,\r\n    0.3536,\r\n    -0.3827,\r\n    0.7682,\r\n    0.3182,\r\n    -0.5556,\r\n    0.6533,\r\n    0.2706,\r\n    -0.7071,\r\n    0.5133,\r\n    0.2126,\r\n    -0.8315,\r\n    0.3536,\r\n    0.1464,\r\n    -0.9239,\r\n    0.1802,\r\n    0.0747,\r\n    -0.9808,\r\n    0.1913,\r\n    0.0381,\r\n    0.9808,\r\n    0.3753,\r\n    0.0747,\r\n    0.9239,\r\n    0.5449,\r\n    0.1084,\r\n    0.8315,\r\n    0.6935,\r\n    0.1379,\r\n    0.7071,\r\n    0.8155,\r\n    0.1622,\r\n    0.5556,\r\n    0.9061,\r\n    0.1802,\r\n    0.3827,\r\n    0.9619,\r\n    0.1913,\r\n    0.1951,\r\n    0.9808,\r\n    0.1951,\r\n    0.0,\r\n    0.9619,\r\n    0.1913,\r\n    -0.1951,\r\n    0.9061,\r\n    0.1802,\r\n    -0.3827,\r\n    0.8155,\r\n    0.1622,\r\n    -0.5556,\r\n    0.6935,\r\n    0.1379,\r\n    -0.7071,\r\n    0.5449,\r\n    0.1084,\r\n    -0.8315,\r\n    0.3753,\r\n    0.0747,\r\n    -0.9239,\r\n    0.1913,\r\n    0.0381,\r\n    -0.9808,\r\n    0.1951,\r\n    -0.0,\r\n    0.9808,\r\n    0.3827,\r\n    -0.0,\r\n    0.9239,\r\n    0.5556,\r\n    -0.0,\r\n    0.8315,\r\n    0.7071,\r\n    -0.0,\r\n    0.7071,\r\n    0.8315,\r\n    -0.0,\r\n    0.5556,\r\n    0.9239,\r\n    -0.0,\r\n    0.3827,\r\n    0.9808,\r\n    -0.0,\r\n    0.1951,\r\n    1.0,\r\n    -0.0,\r\n    0.0,\r\n    0.9808,\r\n    -0.0,\r\n    -0.1951,\r\n    0.9239,\r\n    -0.0,\r\n    -0.3827,\r\n    0.8315,\r\n    -0.0,\r\n    -0.5556,\r\n    0.7071,\r\n    -0.0,\r\n    -0.7071,\r\n    0.5556,\r\n    -0.0,\r\n    -0.8315,\r\n    0.3827,\r\n    -0.0,\r\n    -0.9239,\r\n    0.1951,\r\n    -0.0,\r\n    -0.9808,\r\n    0.1913,\r\n    -0.0381,\r\n    0.9808,\r\n    0.3753,\r\n    -0.0747,\r\n    0.9239,\r\n    0.5449,\r\n    -0.1084,\r\n    0.8315,\r\n    0.6935,\r\n    -0.138,\r\n    0.7071,\r\n    0.8155,\r\n    -0.1622,\r\n    0.5556,\r\n    0.9061,\r\n    -0.1802,\r\n    0.3827,\r\n    0.9619,\r\n    -0.1913,\r\n    0.1951,\r\n    0.9808,\r\n    -0.1951,\r\n    0.0,\r\n    0.9619,\r\n    -0.1913,\r\n    -0.1951,\r\n    0.9061,\r\n    -0.1802,\r\n    -0.3827,\r\n    0.8155,\r\n    -0.1622,\r\n    -0.5556,\r\n    0.6935,\r\n    -0.138,\r\n    -0.7071,\r\n    0.5449,\r\n    -0.1084,\r\n    -0.8315,\r\n    0.3753,\r\n    -0.0747,\r\n    -0.9239,\r\n    0.1913,\r\n    -0.0381,\r\n    -0.9808,\r\n    0.1802,\r\n    -0.0747,\r\n    0.9808,\r\n    0.3536,\r\n    -0.1464,\r\n    0.9239,\r\n    0.5133,\r\n    -0.2126,\r\n    0.8315,\r\n    0.6533,\r\n    -0.2706,\r\n    0.7071,\r\n    0.7682,\r\n    -0.3182,\r\n    0.5556,\r\n    0.8536,\r\n    -0.3536,\r\n    0.3827,\r\n    0.9061,\r\n    -0.3753,\r\n    0.1951,\r\n    0.9239,\r\n    -0.3827,\r\n    0.0,\r\n    0.9061,\r\n    -0.3753,\r\n    -0.1951,\r\n    0.8536,\r\n    -0.3536,\r\n    -0.3827,\r\n    0.7682,\r\n    -0.3182,\r\n    -0.5556,\r\n    0.6533,\r\n    -0.2706,\r\n    -0.7071,\r\n    0.5133,\r\n    -0.2126,\r\n    -0.8315,\r\n    0.3536,\r\n    -0.1464,\r\n    -0.9239,\r\n    0.1802,\r\n    -0.0747,\r\n    -0.9808,\r\n    0.1622,\r\n    -0.1084,\r\n    0.9808,\r\n    0.3182,\r\n    -0.2126,\r\n    0.9239,\r\n    0.4619,\r\n    -0.3087,\r\n    0.8315,\r\n    0.5879,\r\n    -0.3928,\r\n    0.7071,\r\n    0.6913,\r\n    -0.4619,\r\n    0.5556,\r\n    0.7682,\r\n    -0.5133,\r\n    0.3827,\r\n    0.8155,\r\n    -0.5449,\r\n    0.1951,\r\n    0.8315,\r\n    -0.5556,\r\n    0.0,\r\n    0.8155,\r\n    -0.5449,\r\n    -0.1951,\r\n    0.7682,\r\n    -0.5133,\r\n    -0.3827,\r\n    0.6913,\r\n    -0.4619,\r\n    -0.5556,\r\n    0.5879,\r\n    -0.3928,\r\n    -0.7071,\r\n    0.4619,\r\n    -0.3087,\r\n    -0.8315,\r\n    0.3182,\r\n    -0.2126,\r\n    -0.9239,\r\n    0.1622,\r\n    -0.1084,\r\n    -0.9808,\r\n    0.1379,\r\n    -0.138,\r\n    0.9808,\r\n    0.2706,\r\n    -0.2706,\r\n    0.9239,\r\n    0.3928,\r\n    -0.3928,\r\n    0.8315,\r\n    0.5,\r\n    -0.5,\r\n    0.7071,\r\n    0.5879,\r\n    -0.5879,\r\n    0.5556,\r\n    0.6533,\r\n    -0.6533,\r\n    0.3827,\r\n    0.6935,\r\n    -0.6935,\r\n    0.1951,\r\n    0.7071,\r\n    -0.7071,\r\n    0.0,\r\n    0.6935,\r\n    -0.6935,\r\n    -0.1951,\r\n    0.6533,\r\n    -0.6533,\r\n    -0.3827,\r\n    0.5879,\r\n    -0.5879,\r\n    -0.5556,\r\n    0.5,\r\n    -0.5,\r\n    -0.7071,\r\n    0.3928,\r\n    -0.3928,\r\n    -0.8315,\r\n    0.2706,\r\n    -0.2706,\r\n    -0.9239,\r\n    0.1379,\r\n    -0.138,\r\n    -0.9808,\r\n    0.1084,\r\n    -0.1622,\r\n    0.9808,\r\n    0.2126,\r\n    -0.3182,\r\n    0.9239,\r\n    0.3087,\r\n    -0.4619,\r\n    0.8315,\r\n    0.3928,\r\n    -0.5879,\r\n    0.7071,\r\n    0.4619,\r\n    -0.6913,\r\n    0.5556,\r\n    0.5133,\r\n    -0.7682,\r\n    0.3827,\r\n    0.5449,\r\n    -0.8155,\r\n    0.1951,\r\n    0.5556,\r\n    -0.8315,\r\n    0.0,\r\n    0.5449,\r\n    -0.8155,\r\n    -0.1951,\r\n    0.5133,\r\n    -0.7682,\r\n    -0.3827,\r\n    0.4619,\r\n    -0.6913,\r\n    -0.5556,\r\n    0.3928,\r\n    -0.5879,\r\n    -0.7071,\r\n    0.3087,\r\n    -0.4619,\r\n    -0.8315,\r\n    0.2126,\r\n    -0.3182,\r\n    -0.9239,\r\n    0.1084,\r\n    -0.1622,\r\n    -0.9808,\r\n    0.0,\r\n    -0.0,\r\n    -1.0,\r\n    0.0747,\r\n    -0.1802,\r\n    0.9808,\r\n    0.1464,\r\n    -0.3536,\r\n    0.9239,\r\n    0.2126,\r\n    -0.5133,\r\n    0.8315,\r\n    0.2706,\r\n    -0.6533,\r\n    0.7071,\r\n    0.3182,\r\n    -0.7682,\r\n    0.5556,\r\n    0.3536,\r\n    -0.8536,\r\n    0.3827,\r\n    0.3753,\r\n    -0.9061,\r\n    0.1951,\r\n    0.3827,\r\n    -0.9239,\r\n    0.0,\r\n    0.3753,\r\n    -0.9061,\r\n    -0.1951,\r\n    0.3536,\r\n    -0.8536,\r\n    -0.3827,\r\n    0.3182,\r\n    -0.7682,\r\n    -0.5556,\r\n    0.2706,\r\n    -0.6533,\r\n    -0.7071,\r\n    0.2126,\r\n    -0.5133,\r\n    -0.8315,\r\n    0.1464,\r\n    -0.3536,\r\n    -0.9239,\r\n    0.0747,\r\n    -0.1802,\r\n    -0.9808,\r\n    0.0381,\r\n    -0.1913,\r\n    0.9808,\r\n    0.0747,\r\n    -0.3753,\r\n    0.9239,\r\n    0.1084,\r\n    -0.5449,\r\n    0.8315,\r\n    0.1379,\r\n    -0.6935,\r\n    0.7071,\r\n    0.1622,\r\n    -0.8155,\r\n    0.5556,\r\n    0.1802,\r\n    -0.9061,\r\n    0.3827,\r\n    0.1913,\r\n    -0.9619,\r\n    0.1951,\r\n    0.1951,\r\n    -0.9808,\r\n    0.0,\r\n    0.1913,\r\n    -0.9619,\r\n    -0.1951,\r\n    0.1802,\r\n    -0.9061,\r\n    -0.3827,\r\n    0.1622,\r\n    -0.8155,\r\n    -0.5556,\r\n    0.1379,\r\n    -0.6935,\r\n    -0.7071,\r\n    0.1084,\r\n    -0.5449,\r\n    -0.8315,\r\n    0.0747,\r\n    -0.3753,\r\n    -0.9239,\r\n    0.0381,\r\n    -0.1913,\r\n    -0.9808,\r\n    -0.0,\r\n    -0.1951,\r\n    0.9808,\r\n    0.0,\r\n    -0.3827,\r\n    0.9239,\r\n    0.0,\r\n    -0.5556,\r\n    0.8315,\r\n    -0.0,\r\n    -0.7071,\r\n    0.7071,\r\n    -0.0,\r\n    -0.8315,\r\n    0.5556,\r\n    0.0,\r\n    -0.9239,\r\n    0.3827,\r\n    -0.0,\r\n    -0.9808,\r\n    0.1951,\r\n    -0.0,\r\n    -1.0,\r\n    0.0,\r\n    -0.0,\r\n    -0.9808,\r\n    -0.1951,\r\n    0.0,\r\n    -0.9239,\r\n    -0.3827,\r\n    -0.0,\r\n    -0.8315,\r\n    -0.5556,\r\n    -0.0,\r\n    -0.7071,\r\n    -0.7071,\r\n    -0.0,\r\n    -0.5556,\r\n    -0.8315,\r\n    0.0,\r\n    -0.3827,\r\n    -0.9239,\r\n    0.0,\r\n    -0.1951,\r\n    -0.9808,\r\n    -0.0381,\r\n    -0.1913,\r\n    0.9808,\r\n    -0.0747,\r\n    -0.3753,\r\n    0.9239,\r\n    -0.1084,\r\n    -0.5449,\r\n    0.8315,\r\n    -0.1379,\r\n    -0.6935,\r\n    0.7071,\r\n    -0.1622,\r\n    -0.8155,\r\n    0.5556,\r\n    -0.1802,\r\n    -0.9061,\r\n    0.3827,\r\n    -0.1913,\r\n    -0.9619,\r\n    0.1951,\r\n    -0.1951,\r\n    -0.9808,\r\n    0.0,\r\n    -0.1913,\r\n    -0.9619,\r\n    -0.1951,\r\n    -0.1802,\r\n    -0.9061,\r\n    -0.3827,\r\n    -0.1622,\r\n    -0.8155,\r\n    -0.5556,\r\n    -0.1379,\r\n    -0.6935,\r\n    -0.7071,\r\n    -0.1084,\r\n    -0.5449,\r\n    -0.8315,\r\n    -0.0747,\r\n    -0.3753,\r\n    -0.9239,\r\n    -0.0381,\r\n    -0.1913,\r\n    -0.9808,\r\n    -0.0747,\r\n    -0.1802,\r\n    0.9808,\r\n    -0.1464,\r\n    -0.3536,\r\n    0.9239,\r\n    -0.2126,\r\n    -0.5133,\r\n    0.8315,\r\n    -0.2706,\r\n    -0.6533,\r\n    0.7071,\r\n    -0.3182,\r\n    -0.7682,\r\n    0.5556,\r\n    -0.3536,\r\n    -0.8536,\r\n    0.3827,\r\n    -0.3753,\r\n    -0.9061,\r\n    0.1951,\r\n    -0.3827,\r\n    -0.9239,\r\n    0.0,\r\n    -0.3753,\r\n    -0.9061,\r\n    -0.1951,\r\n    -0.3536,\r\n    -0.8536,\r\n    -0.3827,\r\n    -0.3182,\r\n    -0.7682,\r\n    -0.5556,\r\n    -0.2706,\r\n    -0.6533,\r\n    -0.7071,\r\n    -0.2126,\r\n    -0.5133,\r\n    -0.8315,\r\n    -0.1464,\r\n    -0.3536,\r\n    -0.9239,\r\n    -0.0747,\r\n    -0.1802,\r\n    -0.9808,\r\n    -0.1084,\r\n    -0.1622,\r\n    0.9808,\r\n    -0.2126,\r\n    -0.3182,\r\n    0.9239,\r\n    -0.3087,\r\n    -0.4619,\r\n    0.8315,\r\n    -0.3928,\r\n    -0.5879,\r\n    0.7071,\r\n    -0.4619,\r\n    -0.6913,\r\n    0.5556,\r\n    -0.5133,\r\n    -0.7682,\r\n    0.3827,\r\n    -0.5449,\r\n    -0.8155,\r\n    0.1951,\r\n    -0.5556,\r\n    -0.8315,\r\n    0.0,\r\n    -0.5449,\r\n    -0.8155,\r\n    -0.1951,\r\n    -0.5133,\r\n    -0.7682,\r\n    -0.3827,\r\n    -0.4619,\r\n    -0.6913,\r\n    -0.5556,\r\n    -0.3928,\r\n    -0.5879,\r\n    -0.7071,\r\n    -0.3087,\r\n    -0.4619,\r\n    -0.8315,\r\n    -0.2126,\r\n    -0.3182,\r\n    -0.9239,\r\n    -0.1084,\r\n    -0.1622,\r\n    -0.9808,\r\n    -0.0,\r\n    -0.0,\r\n    1.0,\r\n    -0.1379,\r\n    -0.138,\r\n    0.9808,\r\n    -0.2706,\r\n    -0.2706,\r\n    0.9239,\r\n    -0.3928,\r\n    -0.3928,\r\n    0.8315,\r\n    -0.5,\r\n    -0.5,\r\n    0.7071,\r\n    -0.5879,\r\n    -0.5879,\r\n    0.5556,\r\n    -0.6533,\r\n    -0.6533,\r\n    0.3827,\r\n    -0.6935,\r\n    -0.6935,\r\n    0.1951,\r\n    -0.7071,\r\n    -0.7071,\r\n    0.0,\r\n    -0.6935,\r\n    -0.6935,\r\n    -0.1951,\r\n    -0.6533,\r\n    -0.6533,\r\n    -0.3827,\r\n    -0.5879,\r\n    -0.5879,\r\n    -0.5556,\r\n    -0.5,\r\n    -0.5,\r\n    -0.7071,\r\n    -0.3928,\r\n    -0.3928,\r\n    -0.8315,\r\n    -0.2706,\r\n    -0.2706,\r\n    -0.9239,\r\n    -0.1379,\r\n    -0.1379,\r\n    -0.9808,\r\n    -0.1622,\r\n    -0.1084,\r\n    0.9808,\r\n    -0.3182,\r\n    -0.2126,\r\n    0.9239,\r\n    -0.4619,\r\n    -0.3087,\r\n    0.8315,\r\n    -0.5879,\r\n    -0.3928,\r\n    0.7071,\r\n    -0.6913,\r\n    -0.4619,\r\n    0.5556,\r\n    -0.7682,\r\n    -0.5133,\r\n    0.3827,\r\n    -0.8155,\r\n    -0.5449,\r\n    0.1951,\r\n    -0.8315,\r\n    -0.5556,\r\n    0.0,\r\n    -0.8155,\r\n    -0.5449,\r\n    -0.1951,\r\n    -0.7682,\r\n    -0.5133,\r\n    -0.3827,\r\n    -0.6913,\r\n    -0.4619,\r\n    -0.5556,\r\n    -0.5879,\r\n    -0.3928,\r\n    -0.7071,\r\n    -0.4619,\r\n    -0.3087,\r\n    -0.8315,\r\n    -0.3182,\r\n    -0.2126,\r\n    -0.9239,\r\n    -0.1622,\r\n    -0.1084,\r\n    -0.9808,\r\n    -0.1802,\r\n    -0.0747,\r\n    0.9808,\r\n    -0.3536,\r\n    -0.1464,\r\n    0.9239,\r\n    -0.5133,\r\n    -0.2126,\r\n    0.8315,\r\n    -0.6533,\r\n    -0.2706,\r\n    0.7071,\r\n    -0.7682,\r\n    -0.3182,\r\n    0.5556,\r\n    -0.8536,\r\n    -0.3536,\r\n    0.3827,\r\n    -0.9061,\r\n    -0.3753,\r\n    0.1951,\r\n    -0.9239,\r\n    -0.3827,\r\n    0.0,\r\n    -0.9061,\r\n    -0.3753,\r\n    -0.1951,\r\n    -0.8536,\r\n    -0.3536,\r\n    -0.3827,\r\n    -0.7682,\r\n    -0.3182,\r\n    -0.5556,\r\n    -0.6533,\r\n    -0.2706,\r\n    -0.7071,\r\n    -0.5133,\r\n    -0.2126,\r\n    -0.8315,\r\n    -0.3536,\r\n    -0.1464,\r\n    -0.9239,\r\n    -0.1802,\r\n    -0.0747,\r\n    -0.9808,\r\n    -0.1913,\r\n    -0.0381,\r\n    0.9808,\r\n    -0.3753,\r\n    -0.0747,\r\n    0.9239,\r\n    -0.5449,\r\n    -0.1084,\r\n    0.8315,\r\n    -0.6935,\r\n    -0.1379,\r\n    0.7071,\r\n    -0.8155,\r\n    -0.1622,\r\n    0.5556,\r\n    -0.9061,\r\n    -0.1802,\r\n    0.3827,\r\n    -0.9619,\r\n    -0.1913,\r\n    0.1951,\r\n    -0.9808,\r\n    -0.1951,\r\n    0.0,\r\n    -0.9619,\r\n    -0.1913,\r\n    -0.1951,\r\n    -0.9061,\r\n    -0.1802,\r\n    -0.3827,\r\n    -0.8155,\r\n    -0.1622,\r\n    -0.5556,\r\n    -0.6935,\r\n    -0.1379,\r\n    -0.7071,\r\n    -0.5449,\r\n    -0.1084,\r\n    -0.8315,\r\n    -0.3753,\r\n    -0.0747,\r\n    -0.9239,\r\n    -0.1913,\r\n    -0.0381,\r\n    -0.9808,\r\n    -0.1951,\r\n    -0.0,\r\n    0.9808,\r\n    -0.3827,\r\n    -0.0,\r\n    0.9239,\r\n    -0.5556,\r\n    -0.0,\r\n    0.8315,\r\n    -0.7071,\r\n    -0.0,\r\n    0.7071,\r\n    -0.8315,\r\n    -0.0,\r\n    0.5556,\r\n    -0.9239,\r\n    -0.0,\r\n    0.3827,\r\n    -0.9808,\r\n    -0.0,\r\n    0.1951,\r\n    -1.0,\r\n    -0.0,\r\n    0.0,\r\n    -0.9808,\r\n    -0.0,\r\n    -0.1951,\r\n    -0.9239,\r\n    -0.0,\r\n    -0.3827,\r\n    -0.8315,\r\n    -0.0,\r\n    -0.5556,\r\n    -0.7071,\r\n    -0.0,\r\n    -0.7071,\r\n    -0.5556,\r\n    -0.0,\r\n    -0.8315,\r\n    -0.3827,\r\n    -0.0,\r\n    -0.9239,\r\n    -0.1951,\r\n    -0.0,\r\n    -0.9808,\r\n    -0.1913,\r\n    0.0381,\r\n    0.9808,\r\n    -0.3753,\r\n    0.0747,\r\n    0.9239,\r\n    -0.5449,\r\n    0.1084,\r\n    0.8315,\r\n    -0.6935,\r\n    0.1379,\r\n    0.7071,\r\n    -0.8155,\r\n    0.1622,\r\n    0.5556,\r\n    -0.9061,\r\n    0.1802,\r\n    0.3827,\r\n    -0.9619,\r\n    0.1913,\r\n    0.1951,\r\n    -0.9808,\r\n    0.1951,\r\n    0.0,\r\n    -0.9619,\r\n    0.1913,\r\n    -0.1951,\r\n    -0.9061,\r\n    0.1802,\r\n    -0.3827,\r\n    -0.8155,\r\n    0.1622,\r\n    -0.5556,\r\n    -0.6935,\r\n    0.1379,\r\n    -0.7071,\r\n    -0.5449,\r\n    0.1084,\r\n    -0.8315,\r\n    -0.3753,\r\n    0.0747,\r\n    -0.9239,\r\n    -0.1913,\r\n    0.0381,\r\n    -0.9808,\r\n    -0.1802,\r\n    0.0747,\r\n    0.9808,\r\n    -0.3536,\r\n    0.1464,\r\n    0.9239,\r\n    -0.5133,\r\n    0.2126,\r\n    0.8315,\r\n    -0.6533,\r\n    0.2706,\r\n    0.7071,\r\n    -0.7682,\r\n    0.3182,\r\n    0.5556,\r\n    -0.8536,\r\n    0.3536,\r\n    0.3827,\r\n    -0.9061,\r\n    0.3753,\r\n    0.1951,\r\n    -0.9239,\r\n    0.3827,\r\n    0.0,\r\n    -0.9061,\r\n    0.3753,\r\n    -0.1951,\r\n    -0.8536,\r\n    0.3536,\r\n    -0.3827,\r\n    -0.7682,\r\n    0.3182,\r\n    -0.5556,\r\n    -0.6533,\r\n    0.2706,\r\n    -0.7071,\r\n    -0.5133,\r\n    0.2126,\r\n    -0.8315,\r\n    -0.3536,\r\n    0.1464,\r\n    -0.9239,\r\n    -0.1802,\r\n    0.0747,\r\n    -0.9808,\r\n    -0.1622,\r\n    0.1084,\r\n    0.9808,\r\n    -0.3182,\r\n    0.2126,\r\n    0.9239,\r\n    -0.4619,\r\n    0.3087,\r\n    0.8315,\r\n    -0.5879,\r\n    0.3928,\r\n    0.7071,\r\n    -0.6913,\r\n    0.4619,\r\n    0.5556,\r\n    -0.7682,\r\n    0.5133,\r\n    0.3827,\r\n    -0.8155,\r\n    0.5449,\r\n    0.1951,\r\n    -0.8315,\r\n    0.5556,\r\n    0.0,\r\n    -0.8155,\r\n    0.5449,\r\n    -0.1951,\r\n    -0.7682,\r\n    0.5133,\r\n    -0.3827,\r\n    -0.6913,\r\n    0.4619,\r\n    -0.5556,\r\n    -0.5879,\r\n    0.3928,\r\n    -0.7071,\r\n    -0.4619,\r\n    0.3087,\r\n    -0.8315,\r\n    -0.3182,\r\n    0.2126,\r\n    -0.9239,\r\n    -0.1622,\r\n    0.1084,\r\n    -0.9808,\r\n    -0.1379,\r\n    0.1379,\r\n    0.9808,\r\n    -0.2706,\r\n    0.2706,\r\n    0.9239,\r\n    -0.3928,\r\n    0.3928,\r\n    0.8315,\r\n    -0.5,\r\n    0.5,\r\n    0.7071,\r\n    -0.5879,\r\n    0.5879,\r\n    0.5556,\r\n    -0.6533,\r\n    0.6533,\r\n    0.3827,\r\n    -0.6935,\r\n    0.6935,\r\n    0.1951,\r\n    -0.7071,\r\n    0.7071,\r\n    0.0,\r\n    -0.6935,\r\n    0.6935,\r\n    -0.1951,\r\n    -0.6533,\r\n    0.6533,\r\n    -0.3827,\r\n    -0.5879,\r\n    0.5879,\r\n    -0.5556,\r\n    -0.5,\r\n    0.5,\r\n    -0.7071,\r\n    -0.3928,\r\n    0.3928,\r\n    -0.8315,\r\n    -0.2706,\r\n    0.2706,\r\n    -0.9239,\r\n    -0.1379,\r\n    0.1379,\r\n    -0.9808,\r\n    -0.1084,\r\n    0.1622,\r\n    0.9808,\r\n    -0.2126,\r\n    0.3182,\r\n    0.9239,\r\n    -0.3087,\r\n    0.4619,\r\n    0.8315,\r\n    -0.3928,\r\n    0.5879,\r\n    0.7071,\r\n    -0.4619,\r\n    0.6913,\r\n    0.5556,\r\n    -0.5133,\r\n    0.7682,\r\n    0.3827,\r\n    -0.5449,\r\n    0.8155,\r\n    0.1951,\r\n    -0.5556,\r\n    0.8315,\r\n    0.0,\r\n    -0.5449,\r\n    0.8155,\r\n    -0.1951,\r\n    -0.5133,\r\n    0.7682,\r\n    -0.3827,\r\n    -0.4619,\r\n    0.6913,\r\n    -0.5556,\r\n    -0.3928,\r\n    0.5879,\r\n    -0.7071,\r\n    -0.3087,\r\n    0.4619,\r\n    -0.8315,\r\n    -0.2126,\r\n    0.3182,\r\n    -0.9239,\r\n    -0.1084,\r\n    0.1622,\r\n    -0.9808,\r\n    -0.0747,\r\n    0.1802,\r\n    0.9808,\r\n    -0.1464,\r\n    0.3536,\r\n    0.9239,\r\n    -0.2126,\r\n    0.5133,\r\n    0.8315,\r\n    -0.2706,\r\n    0.6533,\r\n    0.7071,\r\n    -0.3182,\r\n    0.7682,\r\n    0.5556,\r\n    -0.3536,\r\n    0.8536,\r\n    0.3827,\r\n    -0.3753,\r\n    0.9061,\r\n    0.1951,\r\n    -0.3827,\r\n    0.9239,\r\n    0.0,\r\n    -0.3753,\r\n    0.9061,\r\n    -0.1951,\r\n    -0.3536,\r\n    0.8536,\r\n    -0.3827,\r\n    -0.3182,\r\n    0.7682,\r\n    -0.5556,\r\n    -0.2706,\r\n    0.6533,\r\n    -0.7071,\r\n    -0.2126,\r\n    0.5133,\r\n    -0.8315,\r\n    -0.1464,\r\n    0.3536,\r\n    -0.9239,\r\n    -0.0747,\r\n    0.1802,\r\n    -0.9808,\r\n    -0.0381,\r\n    0.1913,\r\n    0.9808,\r\n    -0.0747,\r\n    0.3753,\r\n    0.9239,\r\n    -0.1084,\r\n    0.5449,\r\n    0.8315,\r\n    -0.1379,\r\n    0.6935,\r\n    0.7071,\r\n    -0.1622,\r\n    0.8155,\r\n    0.5556,\r\n    -0.1802,\r\n    0.9061,\r\n    0.3827,\r\n    -0.1913,\r\n    0.9619,\r\n    0.1951,\r\n    -0.1951,\r\n    0.9808,\r\n    0.0,\r\n    -0.1913,\r\n    0.9619,\r\n    -0.1951,\r\n    -0.1802,\r\n    0.9061,\r\n    -0.3827,\r\n    -0.1622,\r\n    0.8155,\r\n    -0.5556,\r\n    -0.1379,\r\n    0.6935,\r\n    -0.7071,\r\n    -0.1084,\r\n    0.5449,\r\n    -0.8315,\r\n    -0.0747,\r\n    0.3753,\r\n    -0.9239,\r\n    -0.0381,\r\n    0.1913,\r\n    -0.9808,\r\n    0.0,\r\n    0.9239,\r\n    -0.3827,\r\n    0.0,\r\n    0.8315,\r\n    -0.5556,\r\n    0.0,\r\n    0.7071,\r\n    -0.7071,\r\n    0.0,\r\n    0.3827,\r\n    -0.9239,\r\n    0.0,\r\n    0.1951,\r\n    -0.9808\r\n];\r\nvar Sphere_normals = [\r\n    0.0,\r\n    0.201,\r\n    0.9796,\r\n    0.0,\r\n    0.3879,\r\n    0.9217,\r\n    0.0,\r\n    0.5598,\r\n    0.8286,\r\n    0.0,\r\n    0.7101,\r\n    0.704,\r\n    0.0,\r\n    0.8333,\r\n    0.5528,\r\n    0.0,\r\n    0.9247,\r\n    0.3805,\r\n    0.0,\r\n    0.981,\r\n    0.1939,\r\n    0.0,\r\n    1.0,\r\n    0.0,\r\n    0.0,\r\n    0.981,\r\n    -0.1939,\r\n    0.0,\r\n    0.5598,\r\n    -0.8286,\r\n    0.0392,\r\n    0.1971,\r\n    0.9796,\r\n    0.0757,\r\n    0.3804,\r\n    0.9217,\r\n    0.1092,\r\n    0.549,\r\n    0.8286,\r\n    0.1385,\r\n    0.6965,\r\n    0.704,\r\n    0.1626,\r\n    0.8173,\r\n    0.5528,\r\n    0.1804,\r\n    0.907,\r\n    0.3805,\r\n    0.1914,\r\n    0.9622,\r\n    0.1939,\r\n    0.1951,\r\n    0.9808,\r\n    0.0,\r\n    0.1914,\r\n    0.9622,\r\n    -0.1939,\r\n    0.1804,\r\n    0.907,\r\n    -0.3805,\r\n    0.1626,\r\n    0.8173,\r\n    -0.5528,\r\n    0.1385,\r\n    0.6965,\r\n    -0.704,\r\n    0.1092,\r\n    0.549,\r\n    -0.8286,\r\n    0.0757,\r\n    0.3804,\r\n    -0.9217,\r\n    0.0392,\r\n    0.1971,\r\n    -0.9796,\r\n    0.0769,\r\n    0.1856,\r\n    0.9796,\r\n    0.1484,\r\n    0.3583,\r\n    0.9217,\r\n    0.2142,\r\n    0.5171,\r\n    0.8286,\r\n    0.2717,\r\n    0.6561,\r\n    0.704,\r\n    0.3189,\r\n    0.7699,\r\n    0.5528,\r\n    0.3539,\r\n    0.8544,\r\n    0.3805,\r\n    0.3754,\r\n    0.9063,\r\n    0.1939,\r\n    0.3827,\r\n    0.9239,\r\n    0.0,\r\n    0.3754,\r\n    0.9063,\r\n    -0.1939,\r\n    0.3539,\r\n    0.8544,\r\n    -0.3805,\r\n    0.3189,\r\n    0.7699,\r\n    -0.5528,\r\n    0.2717,\r\n    0.6561,\r\n    -0.704,\r\n    0.2142,\r\n    0.5171,\r\n    -0.8286,\r\n    0.1484,\r\n    0.3583,\r\n    -0.9217,\r\n    0.0769,\r\n    0.1856,\r\n    -0.9796,\r\n    0.1116,\r\n    0.1671,\r\n    0.9796,\r\n    0.2155,\r\n    0.3225,\r\n    0.9217,\r\n    0.311,\r\n    0.4654,\r\n    0.8286,\r\n    0.3945,\r\n    0.5904,\r\n    0.704,\r\n    0.463,\r\n    0.6929,\r\n    0.5528,\r\n    0.5137,\r\n    0.7689,\r\n    0.3805,\r\n    0.545,\r\n    0.8157,\r\n    0.1939,\r\n    0.5556,\r\n    0.8314,\r\n    0.0,\r\n    0.545,\r\n    0.8157,\r\n    -0.1939,\r\n    0.5137,\r\n    0.7689,\r\n    -0.3805,\r\n    0.463,\r\n    0.6929,\r\n    -0.5528,\r\n    0.3945,\r\n    0.5904,\r\n    -0.704,\r\n    0.311,\r\n    0.4654,\r\n    -0.8286,\r\n    0.2155,\r\n    0.3225,\r\n    -0.9217,\r\n    0.1116,\r\n    0.1671,\r\n    -0.9796,\r\n    0.1421,\r\n    0.1421,\r\n    0.9796,\r\n    0.2743,\r\n    0.2743,\r\n    0.9217,\r\n    0.3958,\r\n    0.3958,\r\n    0.8286,\r\n    0.5021,\r\n    0.5021,\r\n    0.704,\r\n    0.5893,\r\n    0.5893,\r\n    0.5528,\r\n    0.6539,\r\n    0.6539,\r\n    0.3805,\r\n    0.6937,\r\n    0.6937,\r\n    0.1939,\r\n    0.7071,\r\n    0.7071,\r\n    0.0,\r\n    0.6937,\r\n    0.6937,\r\n    -0.1939,\r\n    0.6539,\r\n    0.6539,\r\n    -0.3805,\r\n    0.5893,\r\n    0.5893,\r\n    -0.5528,\r\n    0.5021,\r\n    0.5021,\r\n    -0.704,\r\n    0.3958,\r\n    0.3958,\r\n    -0.8286,\r\n    0.2743,\r\n    0.2743,\r\n    -0.9217,\r\n    0.1421,\r\n    0.1421,\r\n    -0.9796,\r\n    0.1671,\r\n    0.1116,\r\n    0.9796,\r\n    0.3225,\r\n    0.2155,\r\n    0.9217,\r\n    0.4654,\r\n    0.311,\r\n    0.8286,\r\n    0.5904,\r\n    0.3945,\r\n    0.704,\r\n    0.6929,\r\n    0.463,\r\n    0.5528,\r\n    0.7689,\r\n    0.5137,\r\n    0.3805,\r\n    0.8157,\r\n    0.545,\r\n    0.1939,\r\n    0.8314,\r\n    0.5556,\r\n    0.0,\r\n    0.8157,\r\n    0.545,\r\n    -0.1939,\r\n    0.7689,\r\n    0.5137,\r\n    -0.3805,\r\n    0.6929,\r\n    0.463,\r\n    -0.5528,\r\n    0.5904,\r\n    0.3945,\r\n    -0.704,\r\n    0.4654,\r\n    0.311,\r\n    -0.8286,\r\n    0.3225,\r\n    0.2155,\r\n    -0.9217,\r\n    0.1671,\r\n    0.1116,\r\n    -0.9796,\r\n    0.1856,\r\n    0.0769,\r\n    0.9796,\r\n    0.3583,\r\n    0.1484,\r\n    0.9217,\r\n    0.5171,\r\n    0.2142,\r\n    0.8286,\r\n    0.6561,\r\n    0.2717,\r\n    0.704,\r\n    0.7699,\r\n    0.3189,\r\n    0.5528,\r\n    0.8544,\r\n    0.3539,\r\n    0.3805,\r\n    0.9063,\r\n    0.3754,\r\n    0.1939,\r\n    0.9239,\r\n    0.3827,\r\n    0.0,\r\n    0.9063,\r\n    0.3754,\r\n    -0.1939,\r\n    0.8544,\r\n    0.3539,\r\n    -0.3805,\r\n    0.7699,\r\n    0.3189,\r\n    -0.5528,\r\n    0.6561,\r\n    0.2717,\r\n    -0.704,\r\n    0.5171,\r\n    0.2142,\r\n    -0.8286,\r\n    0.3583,\r\n    0.1484,\r\n    -0.9217,\r\n    0.1856,\r\n    0.0769,\r\n    -0.9796,\r\n    0.1971,\r\n    0.0392,\r\n    0.9796,\r\n    0.3804,\r\n    0.0757,\r\n    0.9217,\r\n    0.549,\r\n    0.1092,\r\n    0.8286,\r\n    0.6965,\r\n    0.1385,\r\n    0.704,\r\n    0.8173,\r\n    0.1626,\r\n    0.5528,\r\n    0.907,\r\n    0.1804,\r\n    0.3805,\r\n    0.9622,\r\n    0.1914,\r\n    0.1939,\r\n    0.9808,\r\n    0.1951,\r\n    0.0,\r\n    0.9622,\r\n    0.1914,\r\n    -0.1939,\r\n    0.907,\r\n    0.1804,\r\n    -0.3805,\r\n    0.8173,\r\n    0.1626,\r\n    -0.5528,\r\n    0.6965,\r\n    0.1385,\r\n    -0.704,\r\n    0.549,\r\n    0.1092,\r\n    -0.8286,\r\n    0.3804,\r\n    0.0757,\r\n    -0.9217,\r\n    0.1971,\r\n    0.0392,\r\n    -0.9796,\r\n    0.201,\r\n    0.0,\r\n    0.9796,\r\n    0.3879,\r\n    0.0,\r\n    0.9217,\r\n    0.5598,\r\n    0.0,\r\n    0.8286,\r\n    0.7101,\r\n    0.0,\r\n    0.704,\r\n    0.8333,\r\n    0.0,\r\n    0.5528,\r\n    0.9247,\r\n    0.0,\r\n    0.3805,\r\n    0.981,\r\n    0.0,\r\n    0.1939,\r\n    1.0,\r\n    0.0,\r\n    0.0,\r\n    0.981,\r\n    0.0,\r\n    -0.1939,\r\n    0.9247,\r\n    0.0,\r\n    -0.3805,\r\n    0.8333,\r\n    0.0,\r\n    -0.5528,\r\n    0.7101,\r\n    0.0,\r\n    -0.704,\r\n    0.5598,\r\n    0.0,\r\n    -0.8286,\r\n    0.3879,\r\n    0.0,\r\n    -0.9217,\r\n    0.201,\r\n    0.0,\r\n    -0.9796,\r\n    0.1971,\r\n    -0.0392,\r\n    0.9796,\r\n    0.3804,\r\n    -0.0757,\r\n    0.9217,\r\n    0.549,\r\n    -0.1092,\r\n    0.8286,\r\n    0.6965,\r\n    -0.1385,\r\n    0.704,\r\n    0.8173,\r\n    -0.1626,\r\n    0.5528,\r\n    0.907,\r\n    -0.1804,\r\n    0.3805,\r\n    0.9622,\r\n    -0.1914,\r\n    0.1939,\r\n    0.9808,\r\n    -0.1951,\r\n    0.0,\r\n    0.9622,\r\n    -0.1914,\r\n    -0.1939,\r\n    0.907,\r\n    -0.1804,\r\n    -0.3805,\r\n    0.8173,\r\n    -0.1626,\r\n    -0.5528,\r\n    0.6965,\r\n    -0.1385,\r\n    -0.704,\r\n    0.549,\r\n    -0.1092,\r\n    -0.8286,\r\n    0.3804,\r\n    -0.0757,\r\n    -0.9217,\r\n    0.1971,\r\n    -0.0392,\r\n    -0.9796,\r\n    0.1856,\r\n    -0.0769,\r\n    0.9796,\r\n    0.3583,\r\n    -0.1484,\r\n    0.9217,\r\n    0.5171,\r\n    -0.2142,\r\n    0.8286,\r\n    0.6561,\r\n    -0.2717,\r\n    0.704,\r\n    0.7699,\r\n    -0.3189,\r\n    0.5528,\r\n    0.8544,\r\n    -0.3539,\r\n    0.3805,\r\n    0.9063,\r\n    -0.3754,\r\n    0.1939,\r\n    0.9239,\r\n    -0.3827,\r\n    0.0,\r\n    0.9063,\r\n    -0.3754,\r\n    -0.1939,\r\n    0.8544,\r\n    -0.3539,\r\n    -0.3805,\r\n    0.7699,\r\n    -0.3189,\r\n    -0.5528,\r\n    0.6561,\r\n    -0.2717,\r\n    -0.704,\r\n    0.5171,\r\n    -0.2142,\r\n    -0.8286,\r\n    0.3583,\r\n    -0.1484,\r\n    -0.9217,\r\n    0.1856,\r\n    -0.0769,\r\n    -0.9796,\r\n    0.1671,\r\n    -0.1116,\r\n    0.9796,\r\n    0.3225,\r\n    -0.2155,\r\n    0.9217,\r\n    0.4654,\r\n    -0.311,\r\n    0.8286,\r\n    0.5904,\r\n    -0.3945,\r\n    0.704,\r\n    0.6929,\r\n    -0.463,\r\n    0.5528,\r\n    0.7689,\r\n    -0.5137,\r\n    0.3805,\r\n    0.8157,\r\n    -0.545,\r\n    0.1939,\r\n    0.8314,\r\n    -0.5556,\r\n    0.0,\r\n    0.8157,\r\n    -0.545,\r\n    -0.1939,\r\n    0.7689,\r\n    -0.5137,\r\n    -0.3805,\r\n    0.6929,\r\n    -0.463,\r\n    -0.5528,\r\n    0.5904,\r\n    -0.3945,\r\n    -0.704,\r\n    0.4654,\r\n    -0.311,\r\n    -0.8286,\r\n    0.3225,\r\n    -0.2155,\r\n    -0.9217,\r\n    0.1671,\r\n    -0.1116,\r\n    -0.9796,\r\n    0.1421,\r\n    -0.1421,\r\n    0.9796,\r\n    0.2743,\r\n    -0.2743,\r\n    0.9217,\r\n    0.3958,\r\n    -0.3958,\r\n    0.8286,\r\n    0.5021,\r\n    -0.5021,\r\n    0.704,\r\n    0.5893,\r\n    -0.5893,\r\n    0.5528,\r\n    0.6539,\r\n    -0.6539,\r\n    0.3805,\r\n    0.6937,\r\n    -0.6937,\r\n    0.1939,\r\n    0.7071,\r\n    -0.7071,\r\n    0.0,\r\n    0.6937,\r\n    -0.6937,\r\n    -0.1939,\r\n    0.6539,\r\n    -0.6539,\r\n    -0.3805,\r\n    0.5893,\r\n    -0.5893,\r\n    -0.5528,\r\n    0.5021,\r\n    -0.5021,\r\n    -0.704,\r\n    0.3958,\r\n    -0.3958,\r\n    -0.8286,\r\n    0.2743,\r\n    -0.2743,\r\n    -0.9217,\r\n    0.1421,\r\n    -0.1421,\r\n    -0.9796,\r\n    0.1116,\r\n    -0.1671,\r\n    0.9796,\r\n    0.2155,\r\n    -0.3225,\r\n    0.9217,\r\n    0.311,\r\n    -0.4654,\r\n    0.8286,\r\n    0.3945,\r\n    -0.5904,\r\n    0.704,\r\n    0.463,\r\n    -0.6929,\r\n    0.5528,\r\n    0.5137,\r\n    -0.7689,\r\n    0.3805,\r\n    0.545,\r\n    -0.8157,\r\n    0.1939,\r\n    0.5556,\r\n    -0.8314,\r\n    0.0,\r\n    0.545,\r\n    -0.8157,\r\n    -0.1939,\r\n    0.5137,\r\n    -0.7689,\r\n    -0.3805,\r\n    0.463,\r\n    -0.6929,\r\n    -0.5528,\r\n    0.3945,\r\n    -0.5904,\r\n    -0.704,\r\n    0.311,\r\n    -0.4654,\r\n    -0.8286,\r\n    0.2155,\r\n    -0.3225,\r\n    -0.9217,\r\n    0.1116,\r\n    -0.1671,\r\n    -0.9796,\r\n    0.0,\r\n    0.0,\r\n    -1.0,\r\n    0.0769,\r\n    -0.1856,\r\n    0.9796,\r\n    0.1484,\r\n    -0.3583,\r\n    0.9217,\r\n    0.2142,\r\n    -0.5171,\r\n    0.8286,\r\n    0.2717,\r\n    -0.6561,\r\n    0.704,\r\n    0.3189,\r\n    -0.7699,\r\n    0.5528,\r\n    0.3539,\r\n    -0.8544,\r\n    0.3805,\r\n    0.3754,\r\n    -0.9063,\r\n    0.1939,\r\n    0.3827,\r\n    -0.9239,\r\n    0.0,\r\n    0.3754,\r\n    -0.9063,\r\n    -0.1939,\r\n    0.3539,\r\n    -0.8544,\r\n    -0.3805,\r\n    0.3189,\r\n    -0.7699,\r\n    -0.5528,\r\n    0.2717,\r\n    -0.6561,\r\n    -0.704,\r\n    0.2142,\r\n    -0.5171,\r\n    -0.8286,\r\n    0.1484,\r\n    -0.3583,\r\n    -0.9217,\r\n    0.0769,\r\n    -0.1856,\r\n    -0.9796,\r\n    0.0392,\r\n    -0.1971,\r\n    0.9796,\r\n    0.0757,\r\n    -0.3804,\r\n    0.9217,\r\n    0.1092,\r\n    -0.549,\r\n    0.8286,\r\n    0.1385,\r\n    -0.6965,\r\n    0.704,\r\n    0.1626,\r\n    -0.8173,\r\n    0.5528,\r\n    0.1804,\r\n    -0.907,\r\n    0.3805,\r\n    0.1914,\r\n    -0.9622,\r\n    0.1939,\r\n    0.1951,\r\n    -0.9808,\r\n    0.0,\r\n    0.1914,\r\n    -0.9622,\r\n    -0.1939,\r\n    0.1804,\r\n    -0.907,\r\n    -0.3805,\r\n    0.1626,\r\n    -0.8173,\r\n    -0.5528,\r\n    0.1385,\r\n    -0.6965,\r\n    -0.704,\r\n    0.1092,\r\n    -0.549,\r\n    -0.8286,\r\n    0.0757,\r\n    -0.3804,\r\n    -0.9217,\r\n    0.0392,\r\n    -0.1971,\r\n    -0.9796,\r\n    0.0,\r\n    -0.201,\r\n    0.9796,\r\n    0.0,\r\n    -0.3879,\r\n    0.9217,\r\n    0.0,\r\n    -0.5598,\r\n    0.8286,\r\n    0.0,\r\n    -0.7101,\r\n    0.704,\r\n    0.0,\r\n    -0.8333,\r\n    0.5528,\r\n    0.0,\r\n    -0.9247,\r\n    0.3805,\r\n    0.0,\r\n    -0.981,\r\n    0.1939,\r\n    0.0,\r\n    -1.0,\r\n    0.0,\r\n    0.0,\r\n    -0.981,\r\n    -0.1939,\r\n    0.0,\r\n    -0.9247,\r\n    -0.3805,\r\n    0.0,\r\n    -0.8333,\r\n    -0.5528,\r\n    0.0,\r\n    -0.7101,\r\n    -0.704,\r\n    0.0,\r\n    -0.5598,\r\n    -0.8286,\r\n    0.0,\r\n    -0.3879,\r\n    -0.9217,\r\n    0.0,\r\n    -0.201,\r\n    -0.9796,\r\n    -0.0392,\r\n    -0.1971,\r\n    0.9796,\r\n    -0.0757,\r\n    -0.3804,\r\n    0.9217,\r\n    -0.1092,\r\n    -0.549,\r\n    0.8286,\r\n    -0.1385,\r\n    -0.6965,\r\n    0.704,\r\n    -0.1626,\r\n    -0.8173,\r\n    0.5528,\r\n    -0.1804,\r\n    -0.907,\r\n    0.3805,\r\n    -0.1914,\r\n    -0.9622,\r\n    0.1939,\r\n    -0.1951,\r\n    -0.9808,\r\n    0.0,\r\n    -0.1914,\r\n    -0.9622,\r\n    -0.1939,\r\n    -0.1804,\r\n    -0.907,\r\n    -0.3805,\r\n    -0.1626,\r\n    -0.8173,\r\n    -0.5528,\r\n    -0.1385,\r\n    -0.6965,\r\n    -0.704,\r\n    -0.1092,\r\n    -0.549,\r\n    -0.8286,\r\n    -0.0757,\r\n    -0.3804,\r\n    -0.9217,\r\n    -0.0392,\r\n    -0.1971,\r\n    -0.9796,\r\n    -0.0769,\r\n    -0.1856,\r\n    0.9796,\r\n    -0.1484,\r\n    -0.3583,\r\n    0.9217,\r\n    -0.2142,\r\n    -0.5171,\r\n    0.8286,\r\n    -0.2717,\r\n    -0.6561,\r\n    0.704,\r\n    -0.3189,\r\n    -0.7699,\r\n    0.5528,\r\n    -0.3539,\r\n    -0.8544,\r\n    0.3805,\r\n    -0.3754,\r\n    -0.9063,\r\n    0.1939,\r\n    -0.3827,\r\n    -0.9239,\r\n    0.0,\r\n    -0.3754,\r\n    -0.9063,\r\n    -0.1939,\r\n    -0.3539,\r\n    -0.8544,\r\n    -0.3805,\r\n    -0.3189,\r\n    -0.7699,\r\n    -0.5528,\r\n    -0.2717,\r\n    -0.6561,\r\n    -0.704,\r\n    -0.2142,\r\n    -0.5171,\r\n    -0.8286,\r\n    -0.1484,\r\n    -0.3583,\r\n    -0.9217,\r\n    -0.0769,\r\n    -0.1856,\r\n    -0.9796,\r\n    -0.1116,\r\n    -0.1671,\r\n    0.9796,\r\n    -0.2155,\r\n    -0.3225,\r\n    0.9217,\r\n    -0.311,\r\n    -0.4654,\r\n    0.8286,\r\n    -0.3945,\r\n    -0.5904,\r\n    0.704,\r\n    -0.463,\r\n    -0.6929,\r\n    0.5528,\r\n    -0.5137,\r\n    -0.7689,\r\n    0.3805,\r\n    -0.545,\r\n    -0.8157,\r\n    0.1939,\r\n    -0.5556,\r\n    -0.8314,\r\n    0.0,\r\n    -0.545,\r\n    -0.8157,\r\n    -0.1939,\r\n    -0.5137,\r\n    -0.7689,\r\n    -0.3805,\r\n    -0.463,\r\n    -0.6929,\r\n    -0.5528,\r\n    -0.3945,\r\n    -0.5904,\r\n    -0.704,\r\n    -0.311,\r\n    -0.4654,\r\n    -0.8286,\r\n    -0.2155,\r\n    -0.3225,\r\n    -0.9217,\r\n    -0.1116,\r\n    -0.1671,\r\n    -0.9796,\r\n    0.0,\r\n    0.0,\r\n    1.0,\r\n    -0.1421,\r\n    -0.1421,\r\n    0.9796,\r\n    -0.2743,\r\n    -0.2743,\r\n    0.9217,\r\n    -0.3958,\r\n    -0.3958,\r\n    0.8286,\r\n    -0.5021,\r\n    -0.5021,\r\n    0.704,\r\n    -0.5893,\r\n    -0.5893,\r\n    0.5528,\r\n    -0.6539,\r\n    -0.6539,\r\n    0.3805,\r\n    -0.6937,\r\n    -0.6937,\r\n    0.1939,\r\n    -0.7071,\r\n    -0.7071,\r\n    0.0,\r\n    -0.6937,\r\n    -0.6937,\r\n    -0.1939,\r\n    -0.6539,\r\n    -0.6539,\r\n    -0.3805,\r\n    -0.5893,\r\n    -0.5893,\r\n    -0.5528,\r\n    -0.5021,\r\n    -0.5021,\r\n    -0.704,\r\n    -0.3958,\r\n    -0.3958,\r\n    -0.8286,\r\n    -0.2743,\r\n    -0.2743,\r\n    -0.9217,\r\n    -0.1421,\r\n    -0.1421,\r\n    -0.9796,\r\n    -0.1671,\r\n    -0.1116,\r\n    0.9796,\r\n    -0.3225,\r\n    -0.2155,\r\n    0.9217,\r\n    -0.4654,\r\n    -0.311,\r\n    0.8286,\r\n    -0.5904,\r\n    -0.3945,\r\n    0.704,\r\n    -0.6929,\r\n    -0.463,\r\n    0.5528,\r\n    -0.7689,\r\n    -0.5137,\r\n    0.3805,\r\n    -0.8157,\r\n    -0.545,\r\n    0.1939,\r\n    -0.8314,\r\n    -0.5556,\r\n    0.0,\r\n    -0.8157,\r\n    -0.545,\r\n    -0.1939,\r\n    -0.7689,\r\n    -0.5137,\r\n    -0.3805,\r\n    -0.6929,\r\n    -0.463,\r\n    -0.5528,\r\n    -0.5904,\r\n    -0.3945,\r\n    -0.704,\r\n    -0.4654,\r\n    -0.311,\r\n    -0.8286,\r\n    -0.3225,\r\n    -0.2155,\r\n    -0.9217,\r\n    -0.1671,\r\n    -0.1116,\r\n    -0.9796,\r\n    -0.1856,\r\n    -0.0769,\r\n    0.9796,\r\n    -0.3583,\r\n    -0.1484,\r\n    0.9217,\r\n    -0.5171,\r\n    -0.2142,\r\n    0.8286,\r\n    -0.6561,\r\n    -0.2717,\r\n    0.704,\r\n    -0.7699,\r\n    -0.3189,\r\n    0.5528,\r\n    -0.8544,\r\n    -0.3539,\r\n    0.3805,\r\n    -0.9063,\r\n    -0.3754,\r\n    0.1939,\r\n    -0.9239,\r\n    -0.3827,\r\n    0.0,\r\n    -0.9063,\r\n    -0.3754,\r\n    -0.1939,\r\n    -0.8544,\r\n    -0.3539,\r\n    -0.3805,\r\n    -0.7699,\r\n    -0.3189,\r\n    -0.5528,\r\n    -0.6561,\r\n    -0.2717,\r\n    -0.704,\r\n    -0.5171,\r\n    -0.2142,\r\n    -0.8286,\r\n    -0.3583,\r\n    -0.1484,\r\n    -0.9217,\r\n    -0.1856,\r\n    -0.0769,\r\n    -0.9796,\r\n    -0.1971,\r\n    -0.0392,\r\n    0.9796,\r\n    -0.3804,\r\n    -0.0757,\r\n    0.9217,\r\n    -0.549,\r\n    -0.1092,\r\n    0.8286,\r\n    -0.6965,\r\n    -0.1385,\r\n    0.704,\r\n    -0.8173,\r\n    -0.1626,\r\n    0.5528,\r\n    -0.907,\r\n    -0.1804,\r\n    0.3805,\r\n    -0.9622,\r\n    -0.1914,\r\n    0.1939,\r\n    -0.9808,\r\n    -0.1951,\r\n    0.0,\r\n    -0.9622,\r\n    -0.1914,\r\n    -0.1939,\r\n    -0.907,\r\n    -0.1804,\r\n    -0.3805,\r\n    -0.8173,\r\n    -0.1626,\r\n    -0.5528,\r\n    -0.6965,\r\n    -0.1385,\r\n    -0.704,\r\n    -0.549,\r\n    -0.1092,\r\n    -0.8286,\r\n    -0.3804,\r\n    -0.0757,\r\n    -0.9217,\r\n    -0.1971,\r\n    -0.0392,\r\n    -0.9796,\r\n    -0.201,\r\n    0.0,\r\n    0.9796,\r\n    -0.3879,\r\n    0.0,\r\n    0.9217,\r\n    -0.5598,\r\n    0.0,\r\n    0.8286,\r\n    -0.7101,\r\n    0.0,\r\n    0.704,\r\n    -0.8333,\r\n    0.0,\r\n    0.5528,\r\n    -0.9247,\r\n    0.0,\r\n    0.3805,\r\n    -0.981,\r\n    0.0,\r\n    0.1939,\r\n    -1.0,\r\n    0.0,\r\n    0.0,\r\n    -0.981,\r\n    0.0,\r\n    -0.1939,\r\n    -0.9247,\r\n    0.0,\r\n    -0.3805,\r\n    -0.8333,\r\n    0.0,\r\n    -0.5528,\r\n    -0.7101,\r\n    0.0,\r\n    -0.704,\r\n    -0.5598,\r\n    0.0,\r\n    -0.8286,\r\n    -0.3879,\r\n    0.0,\r\n    -0.9217,\r\n    -0.201,\r\n    0.0,\r\n    -0.9796,\r\n    -0.1971,\r\n    0.0392,\r\n    0.9796,\r\n    -0.3804,\r\n    0.0757,\r\n    0.9217,\r\n    -0.549,\r\n    0.1092,\r\n    0.8286,\r\n    -0.6965,\r\n    0.1385,\r\n    0.704,\r\n    -0.8173,\r\n    0.1626,\r\n    0.5528,\r\n    -0.907,\r\n    0.1804,\r\n    0.3805,\r\n    -0.9622,\r\n    0.1914,\r\n    0.1939,\r\n    -0.9808,\r\n    0.1951,\r\n    0.0,\r\n    -0.9622,\r\n    0.1914,\r\n    -0.1939,\r\n    -0.907,\r\n    0.1804,\r\n    -0.3805,\r\n    -0.8173,\r\n    0.1626,\r\n    -0.5528,\r\n    -0.6965,\r\n    0.1385,\r\n    -0.704,\r\n    -0.549,\r\n    0.1092,\r\n    -0.8286,\r\n    -0.3804,\r\n    0.0757,\r\n    -0.9217,\r\n    -0.1971,\r\n    0.0392,\r\n    -0.9796,\r\n    -0.1856,\r\n    0.0769,\r\n    0.9796,\r\n    -0.3583,\r\n    0.1484,\r\n    0.9217,\r\n    -0.5171,\r\n    0.2142,\r\n    0.8286,\r\n    -0.6561,\r\n    0.2717,\r\n    0.704,\r\n    -0.7699,\r\n    0.3189,\r\n    0.5528,\r\n    -0.8544,\r\n    0.3539,\r\n    0.3805,\r\n    -0.9063,\r\n    0.3754,\r\n    0.1939,\r\n    -0.9239,\r\n    0.3827,\r\n    0.0,\r\n    -0.9063,\r\n    0.3754,\r\n    -0.1939,\r\n    -0.8544,\r\n    0.3539,\r\n    -0.3805,\r\n    -0.7699,\r\n    0.3189,\r\n    -0.5528,\r\n    -0.6561,\r\n    0.2717,\r\n    -0.704,\r\n    -0.5171,\r\n    0.2142,\r\n    -0.8286,\r\n    -0.3583,\r\n    0.1484,\r\n    -0.9217,\r\n    -0.1856,\r\n    0.0769,\r\n    -0.9796,\r\n    -0.1671,\r\n    0.1116,\r\n    0.9796,\r\n    -0.3225,\r\n    0.2155,\r\n    0.9217,\r\n    -0.4654,\r\n    0.311,\r\n    0.8286,\r\n    -0.5904,\r\n    0.3945,\r\n    0.704,\r\n    -0.6929,\r\n    0.463,\r\n    0.5528,\r\n    -0.7689,\r\n    0.5137,\r\n    0.3805,\r\n    -0.8157,\r\n    0.545,\r\n    0.1939,\r\n    -0.8314,\r\n    0.5556,\r\n    0.0,\r\n    -0.8157,\r\n    0.545,\r\n    -0.1939,\r\n    -0.7689,\r\n    0.5137,\r\n    -0.3805,\r\n    -0.6929,\r\n    0.463,\r\n    -0.5528,\r\n    -0.5904,\r\n    0.3945,\r\n    -0.704,\r\n    -0.4654,\r\n    0.311,\r\n    -0.8286,\r\n    -0.3225,\r\n    0.2155,\r\n    -0.9217,\r\n    -0.1671,\r\n    0.1116,\r\n    -0.9796,\r\n    -0.1421,\r\n    0.1421,\r\n    0.9796,\r\n    -0.2743,\r\n    0.2743,\r\n    0.9217,\r\n    -0.3958,\r\n    0.3958,\r\n    0.8286,\r\n    -0.5021,\r\n    0.5021,\r\n    0.704,\r\n    -0.5893,\r\n    0.5893,\r\n    0.5528,\r\n    -0.6539,\r\n    0.6539,\r\n    0.3805,\r\n    -0.6937,\r\n    0.6937,\r\n    0.1939,\r\n    -0.7071,\r\n    0.7071,\r\n    0.0,\r\n    -0.6937,\r\n    0.6937,\r\n    -0.1939,\r\n    -0.6539,\r\n    0.6539,\r\n    -0.3805,\r\n    -0.5893,\r\n    0.5893,\r\n    -0.5528,\r\n    -0.5021,\r\n    0.5021,\r\n    -0.704,\r\n    -0.3958,\r\n    0.3958,\r\n    -0.8286,\r\n    -0.2743,\r\n    0.2743,\r\n    -0.9217,\r\n    -0.1421,\r\n    0.1421,\r\n    -0.9796,\r\n    -0.1116,\r\n    0.1671,\r\n    0.9796,\r\n    -0.2155,\r\n    0.3225,\r\n    0.9217,\r\n    -0.311,\r\n    0.4654,\r\n    0.8286,\r\n    -0.3945,\r\n    0.5904,\r\n    0.704,\r\n    -0.463,\r\n    0.6929,\r\n    0.5528,\r\n    -0.5137,\r\n    0.7689,\r\n    0.3805,\r\n    -0.545,\r\n    0.8157,\r\n    0.1939,\r\n    -0.5556,\r\n    0.8314,\r\n    0.0,\r\n    -0.545,\r\n    0.8157,\r\n    -0.1939,\r\n    -0.5137,\r\n    0.7689,\r\n    -0.3805,\r\n    -0.463,\r\n    0.6929,\r\n    -0.5528,\r\n    -0.3945,\r\n    0.5904,\r\n    -0.704,\r\n    -0.311,\r\n    0.4654,\r\n    -0.8286,\r\n    -0.2155,\r\n    0.3225,\r\n    -0.9217,\r\n    -0.1116,\r\n    0.1671,\r\n    -0.9796,\r\n    -0.0769,\r\n    0.1856,\r\n    0.9796,\r\n    -0.1484,\r\n    0.3583,\r\n    0.9217,\r\n    -0.2142,\r\n    0.5171,\r\n    0.8286,\r\n    -0.2717,\r\n    0.6561,\r\n    0.704,\r\n    -0.3189,\r\n    0.7699,\r\n    0.5528,\r\n    -0.3539,\r\n    0.8544,\r\n    0.3805,\r\n    -0.3754,\r\n    0.9063,\r\n    0.1939,\r\n    -0.3827,\r\n    0.9239,\r\n    0.0,\r\n    -0.3754,\r\n    0.9063,\r\n    -0.1939,\r\n    -0.3539,\r\n    0.8544,\r\n    -0.3805,\r\n    -0.3189,\r\n    0.7699,\r\n    -0.5528,\r\n    -0.2717,\r\n    0.6561,\r\n    -0.704,\r\n    -0.2142,\r\n    0.5171,\r\n    -0.8286,\r\n    -0.1484,\r\n    0.3583,\r\n    -0.9217,\r\n    -0.0769,\r\n    0.1856,\r\n    -0.9796,\r\n    -0.0392,\r\n    0.1971,\r\n    0.9796,\r\n    -0.0757,\r\n    0.3804,\r\n    0.9217,\r\n    -0.1092,\r\n    0.549,\r\n    0.8286,\r\n    -0.1385,\r\n    0.6965,\r\n    0.704,\r\n    -0.1626,\r\n    0.8173,\r\n    0.5528,\r\n    -0.1804,\r\n    0.907,\r\n    0.3805,\r\n    -0.1914,\r\n    0.9622,\r\n    0.1939,\r\n    -0.1951,\r\n    0.9808,\r\n    0.0,\r\n    -0.1914,\r\n    0.9622,\r\n    -0.1939,\r\n    -0.1804,\r\n    0.907,\r\n    -0.3805,\r\n    -0.1626,\r\n    0.8173,\r\n    -0.5528,\r\n    -0.1385,\r\n    0.6965,\r\n    -0.704,\r\n    -0.1092,\r\n    0.549,\r\n    -0.8286,\r\n    -0.0757,\r\n    0.3804,\r\n    -0.9217,\r\n    -0.0392,\r\n    0.1971,\r\n    -0.9796,\r\n    0.0,\r\n    0.9247,\r\n    -0.3805,\r\n    0.0,\r\n    0.8333,\r\n    -0.5528,\r\n    0.0,\r\n    0.7101,\r\n    -0.704,\r\n    0.0,\r\n    0.3879,\r\n    -0.9217,\r\n    0.0,\r\n    0.201,\r\n    -0.9796\r\n];\r\nexports.Sphere_indices = [\r\n    1,\r\n    0,\r\n    10,\r\n    1,\r\n    10,\r\n    11,\r\n    477,\r\n    8,\r\n    18,\r\n    477,\r\n    18,\r\n    19,\r\n    2,\r\n    1,\r\n    11,\r\n    2,\r\n    11,\r\n    12,\r\n    478,\r\n    477,\r\n    19,\r\n    478,\r\n    19,\r\n    20,\r\n    3,\r\n    2,\r\n    12,\r\n    3,\r\n    12,\r\n    13,\r\n    479,\r\n    478,\r\n    20,\r\n    479,\r\n    20,\r\n    21,\r\n    4,\r\n    3,\r\n    13,\r\n    4,\r\n    13,\r\n    14,\r\n    9,\r\n    479,\r\n    21,\r\n    9,\r\n    21,\r\n    22,\r\n    5,\r\n    4,\r\n    14,\r\n    5,\r\n    14,\r\n    15,\r\n    480,\r\n    9,\r\n    22,\r\n    480,\r\n    22,\r\n    23,\r\n    6,\r\n    5,\r\n    15,\r\n    6,\r\n    15,\r\n    16,\r\n    481,\r\n    480,\r\n    23,\r\n    481,\r\n    23,\r\n    24,\r\n    7,\r\n    6,\r\n    16,\r\n    7,\r\n    16,\r\n    17,\r\n    0,\r\n    296,\r\n    10,\r\n    205,\r\n    481,\r\n    24,\r\n    8,\r\n    7,\r\n    17,\r\n    8,\r\n    17,\r\n    18,\r\n    17,\r\n    16,\r\n    31,\r\n    17,\r\n    31,\r\n    32,\r\n    10,\r\n    296,\r\n    25,\r\n    205,\r\n    24,\r\n    39,\r\n    18,\r\n    17,\r\n    32,\r\n    18,\r\n    32,\r\n    33,\r\n    11,\r\n    10,\r\n    25,\r\n    11,\r\n    25,\r\n    26,\r\n    19,\r\n    18,\r\n    33,\r\n    19,\r\n    33,\r\n    34,\r\n    12,\r\n    11,\r\n    26,\r\n    12,\r\n    26,\r\n    27,\r\n    20,\r\n    19,\r\n    34,\r\n    20,\r\n    34,\r\n    35,\r\n    13,\r\n    12,\r\n    27,\r\n    13,\r\n    27,\r\n    28,\r\n    21,\r\n    20,\r\n    35,\r\n    21,\r\n    35,\r\n    36,\r\n    14,\r\n    13,\r\n    28,\r\n    14,\r\n    28,\r\n    29,\r\n    22,\r\n    21,\r\n    36,\r\n    22,\r\n    36,\r\n    37,\r\n    15,\r\n    14,\r\n    29,\r\n    15,\r\n    29,\r\n    30,\r\n    23,\r\n    22,\r\n    37,\r\n    23,\r\n    37,\r\n    38,\r\n    16,\r\n    15,\r\n    30,\r\n    16,\r\n    30,\r\n    31,\r\n    24,\r\n    23,\r\n    38,\r\n    24,\r\n    38,\r\n    39,\r\n    36,\r\n    35,\r\n    50,\r\n    36,\r\n    50,\r\n    51,\r\n    29,\r\n    28,\r\n    43,\r\n    29,\r\n    43,\r\n    44,\r\n    37,\r\n    36,\r\n    51,\r\n    37,\r\n    51,\r\n    52,\r\n    30,\r\n    29,\r\n    44,\r\n    30,\r\n    44,\r\n    45,\r\n    38,\r\n    37,\r\n    52,\r\n    38,\r\n    52,\r\n    53,\r\n    31,\r\n    30,\r\n    45,\r\n    31,\r\n    45,\r\n    46,\r\n    39,\r\n    38,\r\n    53,\r\n    39,\r\n    53,\r\n    54,\r\n    32,\r\n    31,\r\n    46,\r\n    32,\r\n    46,\r\n    47,\r\n    25,\r\n    296,\r\n    40,\r\n    205,\r\n    39,\r\n    54,\r\n    33,\r\n    32,\r\n    47,\r\n    33,\r\n    47,\r\n    48,\r\n    26,\r\n    25,\r\n    40,\r\n    26,\r\n    40,\r\n    41,\r\n    34,\r\n    33,\r\n    48,\r\n    34,\r\n    48,\r\n    49,\r\n    27,\r\n    26,\r\n    41,\r\n    27,\r\n    41,\r\n    42,\r\n    35,\r\n    34,\r\n    49,\r\n    35,\r\n    49,\r\n    50,\r\n    28,\r\n    27,\r\n    42,\r\n    28,\r\n    42,\r\n    43,\r\n    205,\r\n    54,\r\n    69,\r\n    48,\r\n    47,\r\n    62,\r\n    48,\r\n    62,\r\n    63,\r\n    41,\r\n    40,\r\n    55,\r\n    41,\r\n    55,\r\n    56,\r\n    49,\r\n    48,\r\n    63,\r\n    49,\r\n    63,\r\n    64,\r\n    42,\r\n    41,\r\n    56,\r\n    42,\r\n    56,\r\n    57,\r\n    50,\r\n    49,\r\n    64,\r\n    50,\r\n    64,\r\n    65,\r\n    43,\r\n    42,\r\n    57,\r\n    43,\r\n    57,\r\n    58,\r\n    51,\r\n    50,\r\n    65,\r\n    51,\r\n    65,\r\n    66,\r\n    44,\r\n    43,\r\n    58,\r\n    44,\r\n    58,\r\n    59,\r\n    52,\r\n    51,\r\n    66,\r\n    52,\r\n    66,\r\n    67,\r\n    45,\r\n    44,\r\n    59,\r\n    45,\r\n    59,\r\n    60,\r\n    53,\r\n    52,\r\n    67,\r\n    53,\r\n    67,\r\n    68,\r\n    46,\r\n    45,\r\n    60,\r\n    46,\r\n    60,\r\n    61,\r\n    54,\r\n    53,\r\n    68,\r\n    54,\r\n    68,\r\n    69,\r\n    47,\r\n    46,\r\n    61,\r\n    47,\r\n    61,\r\n    62,\r\n    40,\r\n    296,\r\n    55,\r\n    67,\r\n    66,\r\n    81,\r\n    67,\r\n    81,\r\n    82,\r\n    60,\r\n    59,\r\n    74,\r\n    60,\r\n    74,\r\n    75,\r\n    68,\r\n    67,\r\n    82,\r\n    68,\r\n    82,\r\n    83,\r\n    61,\r\n    60,\r\n    75,\r\n    61,\r\n    75,\r\n    76,\r\n    69,\r\n    68,\r\n    83,\r\n    69,\r\n    83,\r\n    84,\r\n    62,\r\n    61,\r\n    76,\r\n    62,\r\n    76,\r\n    77,\r\n    55,\r\n    296,\r\n    70,\r\n    205,\r\n    69,\r\n    84,\r\n    63,\r\n    62,\r\n    77,\r\n    63,\r\n    77,\r\n    78,\r\n    56,\r\n    55,\r\n    70,\r\n    56,\r\n    70,\r\n    71,\r\n    64,\r\n    63,\r\n    78,\r\n    64,\r\n    78,\r\n    79,\r\n    57,\r\n    56,\r\n    71,\r\n    57,\r\n    71,\r\n    72,\r\n    65,\r\n    64,\r\n    79,\r\n    65,\r\n    79,\r\n    80,\r\n    58,\r\n    57,\r\n    72,\r\n    58,\r\n    72,\r\n    73,\r\n    66,\r\n    65,\r\n    80,\r\n    66,\r\n    80,\r\n    81,\r\n    59,\r\n    58,\r\n    73,\r\n    59,\r\n    73,\r\n    74,\r\n    71,\r\n    70,\r\n    85,\r\n    71,\r\n    85,\r\n    86,\r\n    79,\r\n    78,\r\n    93,\r\n    79,\r\n    93,\r\n    94,\r\n    72,\r\n    71,\r\n    86,\r\n    72,\r\n    86,\r\n    87,\r\n    80,\r\n    79,\r\n    94,\r\n    80,\r\n    94,\r\n    95,\r\n    73,\r\n    72,\r\n    87,\r\n    73,\r\n    87,\r\n    88,\r\n    81,\r\n    80,\r\n    95,\r\n    81,\r\n    95,\r\n    96,\r\n    74,\r\n    73,\r\n    88,\r\n    74,\r\n    88,\r\n    89,\r\n    82,\r\n    81,\r\n    96,\r\n    82,\r\n    96,\r\n    97,\r\n    75,\r\n    74,\r\n    89,\r\n    75,\r\n    89,\r\n    90,\r\n    83,\r\n    82,\r\n    97,\r\n    83,\r\n    97,\r\n    98,\r\n    76,\r\n    75,\r\n    90,\r\n    76,\r\n    90,\r\n    91,\r\n    84,\r\n    83,\r\n    98,\r\n    84,\r\n    98,\r\n    99,\r\n    77,\r\n    76,\r\n    91,\r\n    77,\r\n    91,\r\n    92,\r\n    70,\r\n    296,\r\n    85,\r\n    205,\r\n    84,\r\n    99,\r\n    78,\r\n    77,\r\n    92,\r\n    78,\r\n    92,\r\n    93,\r\n    90,\r\n    89,\r\n    104,\r\n    90,\r\n    104,\r\n    105,\r\n    98,\r\n    97,\r\n    112,\r\n    98,\r\n    112,\r\n    113,\r\n    91,\r\n    90,\r\n    105,\r\n    91,\r\n    105,\r\n    106,\r\n    99,\r\n    98,\r\n    113,\r\n    99,\r\n    113,\r\n    114,\r\n    92,\r\n    91,\r\n    106,\r\n    92,\r\n    106,\r\n    107,\r\n    85,\r\n    296,\r\n    100,\r\n    205,\r\n    99,\r\n    114,\r\n    93,\r\n    92,\r\n    107,\r\n    93,\r\n    107,\r\n    108,\r\n    86,\r\n    85,\r\n    100,\r\n    86,\r\n    100,\r\n    101,\r\n    94,\r\n    93,\r\n    108,\r\n    94,\r\n    108,\r\n    109,\r\n    87,\r\n    86,\r\n    101,\r\n    87,\r\n    101,\r\n    102,\r\n    95,\r\n    94,\r\n    109,\r\n    95,\r\n    109,\r\n    110,\r\n    88,\r\n    87,\r\n    102,\r\n    88,\r\n    102,\r\n    103,\r\n    96,\r\n    95,\r\n    110,\r\n    96,\r\n    110,\r\n    111,\r\n    89,\r\n    88,\r\n    103,\r\n    89,\r\n    103,\r\n    104,\r\n    97,\r\n    96,\r\n    111,\r\n    97,\r\n    111,\r\n    112,\r\n    109,\r\n    108,\r\n    123,\r\n    109,\r\n    123,\r\n    124,\r\n    102,\r\n    101,\r\n    116,\r\n    102,\r\n    116,\r\n    117,\r\n    110,\r\n    109,\r\n    124,\r\n    110,\r\n    124,\r\n    125,\r\n    103,\r\n    102,\r\n    117,\r\n    103,\r\n    117,\r\n    118,\r\n    111,\r\n    110,\r\n    125,\r\n    111,\r\n    125,\r\n    126,\r\n    104,\r\n    103,\r\n    118,\r\n    104,\r\n    118,\r\n    119,\r\n    112,\r\n    111,\r\n    126,\r\n    112,\r\n    126,\r\n    127,\r\n    105,\r\n    104,\r\n    119,\r\n    105,\r\n    119,\r\n    120,\r\n    113,\r\n    112,\r\n    127,\r\n    113,\r\n    127,\r\n    128,\r\n    106,\r\n    105,\r\n    120,\r\n    106,\r\n    120,\r\n    121,\r\n    114,\r\n    113,\r\n    128,\r\n    114,\r\n    128,\r\n    129,\r\n    107,\r\n    106,\r\n    121,\r\n    107,\r\n    121,\r\n    122,\r\n    100,\r\n    296,\r\n    115,\r\n    205,\r\n    114,\r\n    129,\r\n    108,\r\n    107,\r\n    122,\r\n    108,\r\n    122,\r\n    123,\r\n    101,\r\n    100,\r\n    115,\r\n    101,\r\n    115,\r\n    116,\r\n    128,\r\n    127,\r\n    142,\r\n    128,\r\n    142,\r\n    143,\r\n    121,\r\n    120,\r\n    135,\r\n    121,\r\n    135,\r\n    136,\r\n    129,\r\n    128,\r\n    143,\r\n    129,\r\n    143,\r\n    144,\r\n    122,\r\n    121,\r\n    136,\r\n    122,\r\n    136,\r\n    137,\r\n    115,\r\n    296,\r\n    130,\r\n    205,\r\n    129,\r\n    144,\r\n    123,\r\n    122,\r\n    137,\r\n    123,\r\n    137,\r\n    138,\r\n    116,\r\n    115,\r\n    130,\r\n    116,\r\n    130,\r\n    131,\r\n    124,\r\n    123,\r\n    138,\r\n    124,\r\n    138,\r\n    139,\r\n    117,\r\n    116,\r\n    131,\r\n    117,\r\n    131,\r\n    132,\r\n    125,\r\n    124,\r\n    139,\r\n    125,\r\n    139,\r\n    140,\r\n    118,\r\n    117,\r\n    132,\r\n    118,\r\n    132,\r\n    133,\r\n    126,\r\n    125,\r\n    140,\r\n    126,\r\n    140,\r\n    141,\r\n    119,\r\n    118,\r\n    133,\r\n    119,\r\n    133,\r\n    134,\r\n    127,\r\n    126,\r\n    141,\r\n    127,\r\n    141,\r\n    142,\r\n    120,\r\n    119,\r\n    134,\r\n    120,\r\n    134,\r\n    135,\r\n    132,\r\n    131,\r\n    146,\r\n    132,\r\n    146,\r\n    147,\r\n    140,\r\n    139,\r\n    154,\r\n    140,\r\n    154,\r\n    155,\r\n    133,\r\n    132,\r\n    147,\r\n    133,\r\n    147,\r\n    148,\r\n    141,\r\n    140,\r\n    155,\r\n    141,\r\n    155,\r\n    156,\r\n    134,\r\n    133,\r\n    148,\r\n    134,\r\n    148,\r\n    149,\r\n    142,\r\n    141,\r\n    156,\r\n    142,\r\n    156,\r\n    157,\r\n    135,\r\n    134,\r\n    149,\r\n    135,\r\n    149,\r\n    150,\r\n    143,\r\n    142,\r\n    157,\r\n    143,\r\n    157,\r\n    158,\r\n    136,\r\n    135,\r\n    150,\r\n    136,\r\n    150,\r\n    151,\r\n    144,\r\n    143,\r\n    158,\r\n    144,\r\n    158,\r\n    159,\r\n    137,\r\n    136,\r\n    151,\r\n    137,\r\n    151,\r\n    152,\r\n    130,\r\n    296,\r\n    145,\r\n    205,\r\n    144,\r\n    159,\r\n    138,\r\n    137,\r\n    152,\r\n    138,\r\n    152,\r\n    153,\r\n    131,\r\n    130,\r\n    145,\r\n    131,\r\n    145,\r\n    146,\r\n    139,\r\n    138,\r\n    153,\r\n    139,\r\n    153,\r\n    154,\r\n    151,\r\n    150,\r\n    165,\r\n    151,\r\n    165,\r\n    166,\r\n    159,\r\n    158,\r\n    173,\r\n    159,\r\n    173,\r\n    174,\r\n    152,\r\n    151,\r\n    166,\r\n    152,\r\n    166,\r\n    167,\r\n    145,\r\n    296,\r\n    160,\r\n    205,\r\n    159,\r\n    174,\r\n    153,\r\n    152,\r\n    167,\r\n    153,\r\n    167,\r\n    168,\r\n    146,\r\n    145,\r\n    160,\r\n    146,\r\n    160,\r\n    161,\r\n    154,\r\n    153,\r\n    168,\r\n    154,\r\n    168,\r\n    169,\r\n    147,\r\n    146,\r\n    161,\r\n    147,\r\n    161,\r\n    162,\r\n    155,\r\n    154,\r\n    169,\r\n    155,\r\n    169,\r\n    170,\r\n    148,\r\n    147,\r\n    162,\r\n    148,\r\n    162,\r\n    163,\r\n    156,\r\n    155,\r\n    170,\r\n    156,\r\n    170,\r\n    171,\r\n    149,\r\n    148,\r\n    163,\r\n    149,\r\n    163,\r\n    164,\r\n    157,\r\n    156,\r\n    171,\r\n    157,\r\n    171,\r\n    172,\r\n    150,\r\n    149,\r\n    164,\r\n    150,\r\n    164,\r\n    165,\r\n    158,\r\n    157,\r\n    172,\r\n    158,\r\n    172,\r\n    173,\r\n    170,\r\n    169,\r\n    184,\r\n    170,\r\n    184,\r\n    185,\r\n    163,\r\n    162,\r\n    177,\r\n    163,\r\n    177,\r\n    178,\r\n    171,\r\n    170,\r\n    185,\r\n    171,\r\n    185,\r\n    186,\r\n    164,\r\n    163,\r\n    178,\r\n    164,\r\n    178,\r\n    179,\r\n    172,\r\n    171,\r\n    186,\r\n    172,\r\n    186,\r\n    187,\r\n    165,\r\n    164,\r\n    179,\r\n    165,\r\n    179,\r\n    180,\r\n    173,\r\n    172,\r\n    187,\r\n    173,\r\n    187,\r\n    188,\r\n    166,\r\n    165,\r\n    180,\r\n    166,\r\n    180,\r\n    181,\r\n    174,\r\n    173,\r\n    188,\r\n    174,\r\n    188,\r\n    189,\r\n    167,\r\n    166,\r\n    181,\r\n    167,\r\n    181,\r\n    182,\r\n    160,\r\n    296,\r\n    175,\r\n    205,\r\n    174,\r\n    189,\r\n    168,\r\n    167,\r\n    182,\r\n    168,\r\n    182,\r\n    183,\r\n    161,\r\n    160,\r\n    175,\r\n    161,\r\n    175,\r\n    176,\r\n    169,\r\n    168,\r\n    183,\r\n    169,\r\n    183,\r\n    184,\r\n    162,\r\n    161,\r\n    176,\r\n    162,\r\n    176,\r\n    177,\r\n    189,\r\n    188,\r\n    203,\r\n    189,\r\n    203,\r\n    204,\r\n    182,\r\n    181,\r\n    196,\r\n    182,\r\n    196,\r\n    197,\r\n    175,\r\n    296,\r\n    190,\r\n    205,\r\n    189,\r\n    204,\r\n    183,\r\n    182,\r\n    197,\r\n    183,\r\n    197,\r\n    198,\r\n    176,\r\n    175,\r\n    190,\r\n    176,\r\n    190,\r\n    191,\r\n    184,\r\n    183,\r\n    198,\r\n    184,\r\n    198,\r\n    199,\r\n    177,\r\n    176,\r\n    191,\r\n    177,\r\n    191,\r\n    192,\r\n    185,\r\n    184,\r\n    199,\r\n    185,\r\n    199,\r\n    200,\r\n    178,\r\n    177,\r\n    192,\r\n    178,\r\n    192,\r\n    193,\r\n    186,\r\n    185,\r\n    200,\r\n    186,\r\n    200,\r\n    201,\r\n    179,\r\n    178,\r\n    193,\r\n    179,\r\n    193,\r\n    194,\r\n    187,\r\n    186,\r\n    201,\r\n    187,\r\n    201,\r\n    202,\r\n    180,\r\n    179,\r\n    194,\r\n    180,\r\n    194,\r\n    195,\r\n    188,\r\n    187,\r\n    202,\r\n    188,\r\n    202,\r\n    203,\r\n    181,\r\n    180,\r\n    195,\r\n    181,\r\n    195,\r\n    196,\r\n    201,\r\n    200,\r\n    216,\r\n    201,\r\n    216,\r\n    217,\r\n    194,\r\n    193,\r\n    209,\r\n    194,\r\n    209,\r\n    210,\r\n    202,\r\n    201,\r\n    217,\r\n    202,\r\n    217,\r\n    218,\r\n    195,\r\n    194,\r\n    210,\r\n    195,\r\n    210,\r\n    211,\r\n    203,\r\n    202,\r\n    218,\r\n    203,\r\n    218,\r\n    219,\r\n    196,\r\n    195,\r\n    211,\r\n    196,\r\n    211,\r\n    212,\r\n    204,\r\n    203,\r\n    219,\r\n    204,\r\n    219,\r\n    220,\r\n    197,\r\n    196,\r\n    212,\r\n    197,\r\n    212,\r\n    213,\r\n    190,\r\n    296,\r\n    206,\r\n    205,\r\n    204,\r\n    220,\r\n    198,\r\n    197,\r\n    213,\r\n    198,\r\n    213,\r\n    214,\r\n    191,\r\n    190,\r\n    206,\r\n    191,\r\n    206,\r\n    207,\r\n    199,\r\n    198,\r\n    214,\r\n    199,\r\n    214,\r\n    215,\r\n    192,\r\n    191,\r\n    207,\r\n    192,\r\n    207,\r\n    208,\r\n    200,\r\n    199,\r\n    215,\r\n    200,\r\n    215,\r\n    216,\r\n    193,\r\n    192,\r\n    208,\r\n    193,\r\n    208,\r\n    209,\r\n    206,\r\n    296,\r\n    221,\r\n    205,\r\n    220,\r\n    235,\r\n    214,\r\n    213,\r\n    228,\r\n    214,\r\n    228,\r\n    229,\r\n    207,\r\n    206,\r\n    221,\r\n    207,\r\n    221,\r\n    222,\r\n    215,\r\n    214,\r\n    229,\r\n    215,\r\n    229,\r\n    230,\r\n    208,\r\n    207,\r\n    222,\r\n    208,\r\n    222,\r\n    223,\r\n    216,\r\n    215,\r\n    230,\r\n    216,\r\n    230,\r\n    231,\r\n    209,\r\n    208,\r\n    223,\r\n    209,\r\n    223,\r\n    224,\r\n    217,\r\n    216,\r\n    231,\r\n    217,\r\n    231,\r\n    232,\r\n    210,\r\n    209,\r\n    224,\r\n    210,\r\n    224,\r\n    225,\r\n    218,\r\n    217,\r\n    232,\r\n    218,\r\n    232,\r\n    233,\r\n    211,\r\n    210,\r\n    225,\r\n    211,\r\n    225,\r\n    226,\r\n    219,\r\n    218,\r\n    233,\r\n    219,\r\n    233,\r\n    234,\r\n    212,\r\n    211,\r\n    226,\r\n    212,\r\n    226,\r\n    227,\r\n    220,\r\n    219,\r\n    234,\r\n    220,\r\n    234,\r\n    235,\r\n    213,\r\n    212,\r\n    227,\r\n    213,\r\n    227,\r\n    228,\r\n    225,\r\n    224,\r\n    239,\r\n    225,\r\n    239,\r\n    240,\r\n    233,\r\n    232,\r\n    247,\r\n    233,\r\n    247,\r\n    248,\r\n    226,\r\n    225,\r\n    240,\r\n    226,\r\n    240,\r\n    241,\r\n    234,\r\n    233,\r\n    248,\r\n    234,\r\n    248,\r\n    249,\r\n    227,\r\n    226,\r\n    241,\r\n    227,\r\n    241,\r\n    242,\r\n    235,\r\n    234,\r\n    249,\r\n    235,\r\n    249,\r\n    250,\r\n    228,\r\n    227,\r\n    242,\r\n    228,\r\n    242,\r\n    243,\r\n    221,\r\n    296,\r\n    236,\r\n    205,\r\n    235,\r\n    250,\r\n    229,\r\n    228,\r\n    243,\r\n    229,\r\n    243,\r\n    244,\r\n    222,\r\n    221,\r\n    236,\r\n    222,\r\n    236,\r\n    237,\r\n    230,\r\n    229,\r\n    244,\r\n    230,\r\n    244,\r\n    245,\r\n    223,\r\n    222,\r\n    237,\r\n    223,\r\n    237,\r\n    238,\r\n    231,\r\n    230,\r\n    245,\r\n    231,\r\n    245,\r\n    246,\r\n    224,\r\n    223,\r\n    238,\r\n    224,\r\n    238,\r\n    239,\r\n    232,\r\n    231,\r\n    246,\r\n    232,\r\n    246,\r\n    247,\r\n    244,\r\n    243,\r\n    258,\r\n    244,\r\n    258,\r\n    259,\r\n    237,\r\n    236,\r\n    251,\r\n    237,\r\n    251,\r\n    252,\r\n    245,\r\n    244,\r\n    259,\r\n    245,\r\n    259,\r\n    260,\r\n    238,\r\n    237,\r\n    252,\r\n    238,\r\n    252,\r\n    253,\r\n    246,\r\n    245,\r\n    260,\r\n    246,\r\n    260,\r\n    261,\r\n    239,\r\n    238,\r\n    253,\r\n    239,\r\n    253,\r\n    254,\r\n    247,\r\n    246,\r\n    261,\r\n    247,\r\n    261,\r\n    262,\r\n    240,\r\n    239,\r\n    254,\r\n    240,\r\n    254,\r\n    255,\r\n    248,\r\n    247,\r\n    262,\r\n    248,\r\n    262,\r\n    263,\r\n    241,\r\n    240,\r\n    255,\r\n    241,\r\n    255,\r\n    256,\r\n    249,\r\n    248,\r\n    263,\r\n    249,\r\n    263,\r\n    264,\r\n    242,\r\n    241,\r\n    256,\r\n    242,\r\n    256,\r\n    257,\r\n    250,\r\n    249,\r\n    264,\r\n    250,\r\n    264,\r\n    265,\r\n    243,\r\n    242,\r\n    257,\r\n    243,\r\n    257,\r\n    258,\r\n    236,\r\n    296,\r\n    251,\r\n    205,\r\n    250,\r\n    265,\r\n    263,\r\n    262,\r\n    277,\r\n    263,\r\n    277,\r\n    278,\r\n    256,\r\n    255,\r\n    270,\r\n    256,\r\n    270,\r\n    271,\r\n    264,\r\n    263,\r\n    278,\r\n    264,\r\n    278,\r\n    279,\r\n    257,\r\n    256,\r\n    271,\r\n    257,\r\n    271,\r\n    272,\r\n    265,\r\n    264,\r\n    279,\r\n    265,\r\n    279,\r\n    280,\r\n    258,\r\n    257,\r\n    272,\r\n    258,\r\n    272,\r\n    273,\r\n    251,\r\n    296,\r\n    266,\r\n    205,\r\n    265,\r\n    280,\r\n    259,\r\n    258,\r\n    273,\r\n    259,\r\n    273,\r\n    274,\r\n    252,\r\n    251,\r\n    266,\r\n    252,\r\n    266,\r\n    267,\r\n    260,\r\n    259,\r\n    274,\r\n    260,\r\n    274,\r\n    275,\r\n    253,\r\n    252,\r\n    267,\r\n    253,\r\n    267,\r\n    268,\r\n    261,\r\n    260,\r\n    275,\r\n    261,\r\n    275,\r\n    276,\r\n    254,\r\n    253,\r\n    268,\r\n    254,\r\n    268,\r\n    269,\r\n    262,\r\n    261,\r\n    276,\r\n    262,\r\n    276,\r\n    277,\r\n    255,\r\n    254,\r\n    269,\r\n    255,\r\n    269,\r\n    270,\r\n    267,\r\n    266,\r\n    281,\r\n    267,\r\n    281,\r\n    282,\r\n    275,\r\n    274,\r\n    289,\r\n    275,\r\n    289,\r\n    290,\r\n    268,\r\n    267,\r\n    282,\r\n    268,\r\n    282,\r\n    283,\r\n    276,\r\n    275,\r\n    290,\r\n    276,\r\n    290,\r\n    291,\r\n    269,\r\n    268,\r\n    283,\r\n    269,\r\n    283,\r\n    284,\r\n    277,\r\n    276,\r\n    291,\r\n    277,\r\n    291,\r\n    292,\r\n    270,\r\n    269,\r\n    284,\r\n    270,\r\n    284,\r\n    285,\r\n    278,\r\n    277,\r\n    292,\r\n    278,\r\n    292,\r\n    293,\r\n    271,\r\n    270,\r\n    285,\r\n    271,\r\n    285,\r\n    286,\r\n    279,\r\n    278,\r\n    293,\r\n    279,\r\n    293,\r\n    294,\r\n    272,\r\n    271,\r\n    286,\r\n    272,\r\n    286,\r\n    287,\r\n    280,\r\n    279,\r\n    294,\r\n    280,\r\n    294,\r\n    295,\r\n    273,\r\n    272,\r\n    287,\r\n    273,\r\n    287,\r\n    288,\r\n    266,\r\n    296,\r\n    281,\r\n    205,\r\n    280,\r\n    295,\r\n    274,\r\n    273,\r\n    288,\r\n    274,\r\n    288,\r\n    289,\r\n    286,\r\n    285,\r\n    301,\r\n    286,\r\n    301,\r\n    302,\r\n    294,\r\n    293,\r\n    309,\r\n    294,\r\n    309,\r\n    310,\r\n    287,\r\n    286,\r\n    302,\r\n    287,\r\n    302,\r\n    303,\r\n    295,\r\n    294,\r\n    310,\r\n    295,\r\n    310,\r\n    311,\r\n    288,\r\n    287,\r\n    303,\r\n    288,\r\n    303,\r\n    304,\r\n    281,\r\n    296,\r\n    297,\r\n    205,\r\n    295,\r\n    311,\r\n    289,\r\n    288,\r\n    304,\r\n    289,\r\n    304,\r\n    305,\r\n    282,\r\n    281,\r\n    297,\r\n    282,\r\n    297,\r\n    298,\r\n    290,\r\n    289,\r\n    305,\r\n    290,\r\n    305,\r\n    306,\r\n    283,\r\n    282,\r\n    298,\r\n    283,\r\n    298,\r\n    299,\r\n    291,\r\n    290,\r\n    306,\r\n    291,\r\n    306,\r\n    307,\r\n    284,\r\n    283,\r\n    299,\r\n    284,\r\n    299,\r\n    300,\r\n    292,\r\n    291,\r\n    307,\r\n    292,\r\n    307,\r\n    308,\r\n    285,\r\n    284,\r\n    300,\r\n    285,\r\n    300,\r\n    301,\r\n    293,\r\n    292,\r\n    308,\r\n    293,\r\n    308,\r\n    309,\r\n    306,\r\n    305,\r\n    320,\r\n    306,\r\n    320,\r\n    321,\r\n    299,\r\n    298,\r\n    313,\r\n    299,\r\n    313,\r\n    314,\r\n    307,\r\n    306,\r\n    321,\r\n    307,\r\n    321,\r\n    322,\r\n    300,\r\n    299,\r\n    314,\r\n    300,\r\n    314,\r\n    315,\r\n    308,\r\n    307,\r\n    322,\r\n    308,\r\n    322,\r\n    323,\r\n    301,\r\n    300,\r\n    315,\r\n    301,\r\n    315,\r\n    316,\r\n    309,\r\n    308,\r\n    323,\r\n    309,\r\n    323,\r\n    324,\r\n    302,\r\n    301,\r\n    316,\r\n    302,\r\n    316,\r\n    317,\r\n    310,\r\n    309,\r\n    324,\r\n    310,\r\n    324,\r\n    325,\r\n    303,\r\n    302,\r\n    317,\r\n    303,\r\n    317,\r\n    318,\r\n    311,\r\n    310,\r\n    325,\r\n    311,\r\n    325,\r\n    326,\r\n    304,\r\n    303,\r\n    318,\r\n    304,\r\n    318,\r\n    319,\r\n    297,\r\n    296,\r\n    312,\r\n    205,\r\n    311,\r\n    326,\r\n    305,\r\n    304,\r\n    319,\r\n    305,\r\n    319,\r\n    320,\r\n    298,\r\n    297,\r\n    312,\r\n    298,\r\n    312,\r\n    313,\r\n    325,\r\n    324,\r\n    339,\r\n    325,\r\n    339,\r\n    340,\r\n    318,\r\n    317,\r\n    332,\r\n    318,\r\n    332,\r\n    333,\r\n    326,\r\n    325,\r\n    340,\r\n    326,\r\n    340,\r\n    341,\r\n    319,\r\n    318,\r\n    333,\r\n    319,\r\n    333,\r\n    334,\r\n    312,\r\n    296,\r\n    327,\r\n    205,\r\n    326,\r\n    341,\r\n    320,\r\n    319,\r\n    334,\r\n    320,\r\n    334,\r\n    335,\r\n    313,\r\n    312,\r\n    327,\r\n    313,\r\n    327,\r\n    328,\r\n    321,\r\n    320,\r\n    335,\r\n    321,\r\n    335,\r\n    336,\r\n    314,\r\n    313,\r\n    328,\r\n    314,\r\n    328,\r\n    329,\r\n    322,\r\n    321,\r\n    336,\r\n    322,\r\n    336,\r\n    337,\r\n    315,\r\n    314,\r\n    329,\r\n    315,\r\n    329,\r\n    330,\r\n    323,\r\n    322,\r\n    337,\r\n    323,\r\n    337,\r\n    338,\r\n    316,\r\n    315,\r\n    330,\r\n    316,\r\n    330,\r\n    331,\r\n    324,\r\n    323,\r\n    338,\r\n    324,\r\n    338,\r\n    339,\r\n    317,\r\n    316,\r\n    331,\r\n    317,\r\n    331,\r\n    332,\r\n    337,\r\n    336,\r\n    351,\r\n    337,\r\n    351,\r\n    352,\r\n    330,\r\n    329,\r\n    344,\r\n    330,\r\n    344,\r\n    345,\r\n    338,\r\n    337,\r\n    352,\r\n    338,\r\n    352,\r\n    353,\r\n    331,\r\n    330,\r\n    345,\r\n    331,\r\n    345,\r\n    346,\r\n    339,\r\n    338,\r\n    353,\r\n    339,\r\n    353,\r\n    354,\r\n    332,\r\n    331,\r\n    346,\r\n    332,\r\n    346,\r\n    347,\r\n    340,\r\n    339,\r\n    354,\r\n    340,\r\n    354,\r\n    355,\r\n    333,\r\n    332,\r\n    347,\r\n    333,\r\n    347,\r\n    348,\r\n    341,\r\n    340,\r\n    355,\r\n    341,\r\n    355,\r\n    356,\r\n    334,\r\n    333,\r\n    348,\r\n    334,\r\n    348,\r\n    349,\r\n    327,\r\n    296,\r\n    342,\r\n    205,\r\n    341,\r\n    356,\r\n    335,\r\n    334,\r\n    349,\r\n    335,\r\n    349,\r\n    350,\r\n    328,\r\n    327,\r\n    342,\r\n    328,\r\n    342,\r\n    343,\r\n    336,\r\n    335,\r\n    350,\r\n    336,\r\n    350,\r\n    351,\r\n    329,\r\n    328,\r\n    343,\r\n    329,\r\n    343,\r\n    344,\r\n    356,\r\n    355,\r\n    370,\r\n    356,\r\n    370,\r\n    371,\r\n    349,\r\n    348,\r\n    363,\r\n    349,\r\n    363,\r\n    364,\r\n    342,\r\n    296,\r\n    357,\r\n    205,\r\n    356,\r\n    371,\r\n    350,\r\n    349,\r\n    364,\r\n    350,\r\n    364,\r\n    365,\r\n    343,\r\n    342,\r\n    357,\r\n    343,\r\n    357,\r\n    358,\r\n    351,\r\n    350,\r\n    365,\r\n    351,\r\n    365,\r\n    366,\r\n    344,\r\n    343,\r\n    358,\r\n    344,\r\n    358,\r\n    359,\r\n    352,\r\n    351,\r\n    366,\r\n    352,\r\n    366,\r\n    367,\r\n    345,\r\n    344,\r\n    359,\r\n    345,\r\n    359,\r\n    360,\r\n    353,\r\n    352,\r\n    367,\r\n    353,\r\n    367,\r\n    368,\r\n    346,\r\n    345,\r\n    360,\r\n    346,\r\n    360,\r\n    361,\r\n    354,\r\n    353,\r\n    368,\r\n    354,\r\n    368,\r\n    369,\r\n    347,\r\n    346,\r\n    361,\r\n    347,\r\n    361,\r\n    362,\r\n    355,\r\n    354,\r\n    369,\r\n    355,\r\n    369,\r\n    370,\r\n    348,\r\n    347,\r\n    362,\r\n    348,\r\n    362,\r\n    363,\r\n    360,\r\n    359,\r\n    374,\r\n    360,\r\n    374,\r\n    375,\r\n    368,\r\n    367,\r\n    382,\r\n    368,\r\n    382,\r\n    383,\r\n    361,\r\n    360,\r\n    375,\r\n    361,\r\n    375,\r\n    376,\r\n    369,\r\n    368,\r\n    383,\r\n    369,\r\n    383,\r\n    384,\r\n    362,\r\n    361,\r\n    376,\r\n    362,\r\n    376,\r\n    377,\r\n    370,\r\n    369,\r\n    384,\r\n    370,\r\n    384,\r\n    385,\r\n    363,\r\n    362,\r\n    377,\r\n    363,\r\n    377,\r\n    378,\r\n    371,\r\n    370,\r\n    385,\r\n    371,\r\n    385,\r\n    386,\r\n    364,\r\n    363,\r\n    378,\r\n    364,\r\n    378,\r\n    379,\r\n    357,\r\n    296,\r\n    372,\r\n    205,\r\n    371,\r\n    386,\r\n    365,\r\n    364,\r\n    379,\r\n    365,\r\n    379,\r\n    380,\r\n    358,\r\n    357,\r\n    372,\r\n    358,\r\n    372,\r\n    373,\r\n    366,\r\n    365,\r\n    380,\r\n    366,\r\n    380,\r\n    381,\r\n    359,\r\n    358,\r\n    373,\r\n    359,\r\n    373,\r\n    374,\r\n    367,\r\n    366,\r\n    381,\r\n    367,\r\n    381,\r\n    382,\r\n    379,\r\n    378,\r\n    393,\r\n    379,\r\n    393,\r\n    394,\r\n    372,\r\n    296,\r\n    387,\r\n    205,\r\n    386,\r\n    401,\r\n    380,\r\n    379,\r\n    394,\r\n    380,\r\n    394,\r\n    395,\r\n    373,\r\n    372,\r\n    387,\r\n    373,\r\n    387,\r\n    388,\r\n    381,\r\n    380,\r\n    395,\r\n    381,\r\n    395,\r\n    396,\r\n    374,\r\n    373,\r\n    388,\r\n    374,\r\n    388,\r\n    389,\r\n    382,\r\n    381,\r\n    396,\r\n    382,\r\n    396,\r\n    397,\r\n    375,\r\n    374,\r\n    389,\r\n    375,\r\n    389,\r\n    390,\r\n    383,\r\n    382,\r\n    397,\r\n    383,\r\n    397,\r\n    398,\r\n    376,\r\n    375,\r\n    390,\r\n    376,\r\n    390,\r\n    391,\r\n    384,\r\n    383,\r\n    398,\r\n    384,\r\n    398,\r\n    399,\r\n    377,\r\n    376,\r\n    391,\r\n    377,\r\n    391,\r\n    392,\r\n    385,\r\n    384,\r\n    399,\r\n    385,\r\n    399,\r\n    400,\r\n    378,\r\n    377,\r\n    392,\r\n    378,\r\n    392,\r\n    393,\r\n    386,\r\n    385,\r\n    400,\r\n    386,\r\n    400,\r\n    401,\r\n    398,\r\n    397,\r\n    412,\r\n    398,\r\n    412,\r\n    413,\r\n    391,\r\n    390,\r\n    405,\r\n    391,\r\n    405,\r\n    406,\r\n    399,\r\n    398,\r\n    413,\r\n    399,\r\n    413,\r\n    414,\r\n    392,\r\n    391,\r\n    406,\r\n    392,\r\n    406,\r\n    407,\r\n    400,\r\n    399,\r\n    414,\r\n    400,\r\n    414,\r\n    415,\r\n    393,\r\n    392,\r\n    407,\r\n    393,\r\n    407,\r\n    408,\r\n    401,\r\n    400,\r\n    415,\r\n    401,\r\n    415,\r\n    416,\r\n    394,\r\n    393,\r\n    408,\r\n    394,\r\n    408,\r\n    409,\r\n    387,\r\n    296,\r\n    402,\r\n    205,\r\n    401,\r\n    416,\r\n    395,\r\n    394,\r\n    409,\r\n    395,\r\n    409,\r\n    410,\r\n    388,\r\n    387,\r\n    402,\r\n    388,\r\n    402,\r\n    403,\r\n    396,\r\n    395,\r\n    410,\r\n    396,\r\n    410,\r\n    411,\r\n    389,\r\n    388,\r\n    403,\r\n    389,\r\n    403,\r\n    404,\r\n    397,\r\n    396,\r\n    411,\r\n    397,\r\n    411,\r\n    412,\r\n    390,\r\n    389,\r\n    404,\r\n    390,\r\n    404,\r\n    405,\r\n    402,\r\n    296,\r\n    417,\r\n    205,\r\n    416,\r\n    431,\r\n    410,\r\n    409,\r\n    424,\r\n    410,\r\n    424,\r\n    425,\r\n    403,\r\n    402,\r\n    417,\r\n    403,\r\n    417,\r\n    418,\r\n    411,\r\n    410,\r\n    425,\r\n    411,\r\n    425,\r\n    426,\r\n    404,\r\n    403,\r\n    418,\r\n    404,\r\n    418,\r\n    419,\r\n    412,\r\n    411,\r\n    426,\r\n    412,\r\n    426,\r\n    427,\r\n    405,\r\n    404,\r\n    419,\r\n    405,\r\n    419,\r\n    420,\r\n    413,\r\n    412,\r\n    427,\r\n    413,\r\n    427,\r\n    428,\r\n    406,\r\n    405,\r\n    420,\r\n    406,\r\n    420,\r\n    421,\r\n    414,\r\n    413,\r\n    428,\r\n    414,\r\n    428,\r\n    429,\r\n    407,\r\n    406,\r\n    421,\r\n    407,\r\n    421,\r\n    422,\r\n    415,\r\n    414,\r\n    429,\r\n    415,\r\n    429,\r\n    430,\r\n    408,\r\n    407,\r\n    422,\r\n    408,\r\n    422,\r\n    423,\r\n    416,\r\n    415,\r\n    430,\r\n    416,\r\n    430,\r\n    431,\r\n    409,\r\n    408,\r\n    423,\r\n    409,\r\n    423,\r\n    424,\r\n    421,\r\n    420,\r\n    435,\r\n    421,\r\n    435,\r\n    436,\r\n    429,\r\n    428,\r\n    443,\r\n    429,\r\n    443,\r\n    444,\r\n    422,\r\n    421,\r\n    436,\r\n    422,\r\n    436,\r\n    437,\r\n    430,\r\n    429,\r\n    444,\r\n    430,\r\n    444,\r\n    445,\r\n    423,\r\n    422,\r\n    437,\r\n    423,\r\n    437,\r\n    438,\r\n    431,\r\n    430,\r\n    445,\r\n    431,\r\n    445,\r\n    446,\r\n    424,\r\n    423,\r\n    438,\r\n    424,\r\n    438,\r\n    439,\r\n    417,\r\n    296,\r\n    432,\r\n    205,\r\n    431,\r\n    446,\r\n    425,\r\n    424,\r\n    439,\r\n    425,\r\n    439,\r\n    440,\r\n    418,\r\n    417,\r\n    432,\r\n    418,\r\n    432,\r\n    433,\r\n    426,\r\n    425,\r\n    440,\r\n    426,\r\n    440,\r\n    441,\r\n    419,\r\n    418,\r\n    433,\r\n    419,\r\n    433,\r\n    434,\r\n    427,\r\n    426,\r\n    441,\r\n    427,\r\n    441,\r\n    442,\r\n    420,\r\n    419,\r\n    434,\r\n    420,\r\n    434,\r\n    435,\r\n    428,\r\n    427,\r\n    442,\r\n    428,\r\n    442,\r\n    443,\r\n    440,\r\n    439,\r\n    454,\r\n    440,\r\n    454,\r\n    455,\r\n    433,\r\n    432,\r\n    447,\r\n    433,\r\n    447,\r\n    448,\r\n    441,\r\n    440,\r\n    455,\r\n    441,\r\n    455,\r\n    456,\r\n    434,\r\n    433,\r\n    448,\r\n    434,\r\n    448,\r\n    449,\r\n    442,\r\n    441,\r\n    456,\r\n    442,\r\n    456,\r\n    457,\r\n    435,\r\n    434,\r\n    449,\r\n    435,\r\n    449,\r\n    450,\r\n    443,\r\n    442,\r\n    457,\r\n    443,\r\n    457,\r\n    458,\r\n    436,\r\n    435,\r\n    450,\r\n    436,\r\n    450,\r\n    451,\r\n    444,\r\n    443,\r\n    458,\r\n    444,\r\n    458,\r\n    459,\r\n    437,\r\n    436,\r\n    451,\r\n    437,\r\n    451,\r\n    452,\r\n    445,\r\n    444,\r\n    459,\r\n    445,\r\n    459,\r\n    460,\r\n    438,\r\n    437,\r\n    452,\r\n    438,\r\n    452,\r\n    453,\r\n    446,\r\n    445,\r\n    460,\r\n    446,\r\n    460,\r\n    461,\r\n    439,\r\n    438,\r\n    453,\r\n    439,\r\n    453,\r\n    454,\r\n    432,\r\n    296,\r\n    447,\r\n    205,\r\n    446,\r\n    461,\r\n    459,\r\n    458,\r\n    473,\r\n    459,\r\n    473,\r\n    474,\r\n    452,\r\n    451,\r\n    466,\r\n    452,\r\n    466,\r\n    467,\r\n    460,\r\n    459,\r\n    474,\r\n    460,\r\n    474,\r\n    475,\r\n    453,\r\n    452,\r\n    467,\r\n    453,\r\n    467,\r\n    468,\r\n    461,\r\n    460,\r\n    475,\r\n    461,\r\n    475,\r\n    476,\r\n    454,\r\n    453,\r\n    468,\r\n    454,\r\n    468,\r\n    469,\r\n    447,\r\n    296,\r\n    462,\r\n    205,\r\n    461,\r\n    476,\r\n    455,\r\n    454,\r\n    469,\r\n    455,\r\n    469,\r\n    470,\r\n    448,\r\n    447,\r\n    462,\r\n    448,\r\n    462,\r\n    463,\r\n    456,\r\n    455,\r\n    470,\r\n    456,\r\n    470,\r\n    471,\r\n    449,\r\n    448,\r\n    463,\r\n    449,\r\n    463,\r\n    464,\r\n    457,\r\n    456,\r\n    471,\r\n    457,\r\n    471,\r\n    472,\r\n    450,\r\n    449,\r\n    464,\r\n    450,\r\n    464,\r\n    465,\r\n    458,\r\n    457,\r\n    472,\r\n    458,\r\n    472,\r\n    473,\r\n    451,\r\n    450,\r\n    465,\r\n    451,\r\n    465,\r\n    466,\r\n    471,\r\n    470,\r\n    8,\r\n    471,\r\n    8,\r\n    477,\r\n    464,\r\n    463,\r\n    1,\r\n    464,\r\n    1,\r\n    2,\r\n    472,\r\n    471,\r\n    477,\r\n    472,\r\n    477,\r\n    478,\r\n    465,\r\n    464,\r\n    2,\r\n    465,\r\n    2,\r\n    3,\r\n    473,\r\n    472,\r\n    478,\r\n    473,\r\n    478,\r\n    479,\r\n    466,\r\n    465,\r\n    3,\r\n    466,\r\n    3,\r\n    4,\r\n    474,\r\n    473,\r\n    479,\r\n    474,\r\n    479,\r\n    9,\r\n    467,\r\n    466,\r\n    4,\r\n    467,\r\n    4,\r\n    5,\r\n    475,\r\n    474,\r\n    9,\r\n    475,\r\n    9,\r\n    480,\r\n    468,\r\n    467,\r\n    5,\r\n    468,\r\n    5,\r\n    6,\r\n    476,\r\n    475,\r\n    480,\r\n    476,\r\n    480,\r\n    481,\r\n    469,\r\n    468,\r\n    6,\r\n    469,\r\n    6,\r\n    7,\r\n    462,\r\n    296,\r\n    0,\r\n    205,\r\n    476,\r\n    481,\r\n    470,\r\n    469,\r\n    7,\r\n    470,\r\n    7,\r\n    8,\r\n    463,\r\n    462,\r\n    0,\r\n    463,\r\n    0,\r\n    1\r\n];\r\n\n\n//# sourceURL=webpack:///./src/geometry/sphere.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar sphere_1 = __webpack_require__(/*! ./geometry/sphere */ \"./src/geometry/sphere.ts\");\r\nvar Helix_1 = __importDefault(__webpack_require__(/*! ./lib/Helix */ \"./src/lib/Helix.ts\"));\r\nvar renderOptions = {\r\n    background: Helix_1.default.Color(\"#0747A6\")\r\n};\r\nvar render = Helix_1.default.Render(renderOptions);\r\nvar scene = Helix_1.default.Scene();\r\nvar camera = Helix_1.default.Camera();\r\nvar music = Helix_1.default.Audio(\"./assets/music.mp3\");\r\nmusic.helper = true;\r\nfunction renderSphere(numberOfSphere) {\r\n    var position = [-5, 0, 5];\r\n    var geometryScene = [];\r\n    for (var i = 0; i < numberOfSphere; i++) {\r\n        var sphere = Helix_1.default.Mesh(sphere_1.Sphere, sphere_1.Sphere_indices, {\r\n            color: Helix_1.default.Color(\"FFFFFF\"),\r\n            wireframe: true\r\n        });\r\n        sphere.position.x = position[i];\r\n        scene.add(sphere);\r\n        geometryScene.push(sphere);\r\n    }\r\n    return geometryScene;\r\n}\r\nrenderSphere(1);\r\ncamera.position.z = 10;\r\ncamera.rotate.x = -0.1;\r\nfunction draw() {\r\n    render.render(camera, scene);\r\n    requestAnimationFrame(draw);\r\n}\r\ndraw();\r\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/lib/Helix.ts":
/*!**************************!*\
  !*** ./src/lib/Helix.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar axis_1 = __webpack_require__(/*! ./helpers/axis */ \"./src/lib/helpers/axis.ts\");\r\nvar floor_1 = __webpack_require__(/*! ./helpers/floor */ \"./src/lib/helpers/floor.ts\");\r\nvar Audio_1 = __webpack_require__(/*! ./audio/Audio */ \"./src/lib/audio/Audio.ts\");\r\nvar Renderer_1 = __webpack_require__(/*! ./renderer/Renderer */ \"./src/lib/renderer/Renderer.ts\");\r\nvar Camera_1 = __webpack_require__(/*! ./camera/Camera */ \"./src/lib/camera/Camera.ts\");\r\nvar Mesh_1 = __webpack_require__(/*! ./geometry/Mesh */ \"./src/lib/geometry/Mesh.ts\");\r\nvar color_1 = __webpack_require__(/*! ./utils/color */ \"./src/lib/utils/color.ts\");\r\nvar Scene_1 = __webpack_require__(/*! ./scene/Scene */ \"./src/lib/scene/Scene.ts\");\r\nvar Helix = /** @class */ (function () {\r\n    function Helix() {\r\n    }\r\n    Helix.prototype.Scene = function () {\r\n        this.SceneRender = new Scene_1.Scene(this.program, this.gl);\r\n        return this.SceneRender;\r\n    };\r\n    Helix.prototype.Render = function (options) {\r\n        this.RenderInstance = new Renderer_1.Render(options);\r\n        this.gl = this.RenderInstance.getGLContext();\r\n        this.program = this.RenderInstance.getGLProgram();\r\n        return this.RenderInstance;\r\n    };\r\n    Helix.prototype.Camera = function () {\r\n        this.CameraInstance = new Camera_1.Camera(this.program, this.gl);\r\n        return this.CameraInstance;\r\n    };\r\n    Helix.prototype.Mesh = function (geometry, indices, options) {\r\n        this.MeshInstance = new Mesh_1.Mesh(this.program, this.gl, geometry, indices, options);\r\n        return this.MeshInstance;\r\n    };\r\n    Helix.prototype.Color = function (HexColor) {\r\n        return color_1.Color.convertHexToRGB(HexColor);\r\n    };\r\n    Helix.prototype.Audio = function (filename, options) {\r\n        this.AudioInstance = new Audio_1.Audio(filename, options);\r\n        return this.AudioInstance;\r\n    };\r\n    Helix.prototype.FloorGeometryHelper = function (options) {\r\n        var floor = new floor_1.Floor(options);\r\n        floor.build();\r\n        return new Mesh_1.Mesh(this.program, this.gl, floor.geometry, floor.indices, {\r\n            color: color_1.Color.convertHexToRGB(\"FFFFFF\"),\r\n            wireframe: true\r\n        });\r\n    };\r\n    Helix.prototype.AxisGeometryHelper = function (dimensions) {\r\n        var axis = new axis_1.Axis(dimensions);\r\n        axis.build();\r\n        return new Mesh_1.Mesh(this.program, this.gl, axis.geometry, axis.indices, {\r\n            color: color_1.Color.convertHexToRGB(\"FFFFFF\"),\r\n            wireframe: true\r\n        });\r\n    };\r\n    return Helix;\r\n}());\r\nexports.default = new Helix();\r\n\n\n//# sourceURL=webpack:///./src/lib/Helix.ts?");

/***/ }),

/***/ "./src/lib/audio/Audio.ts":
/*!********************************!*\
  !*** ./src/lib/audio/Audio.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AudioHelper_1 = __webpack_require__(/*! ./AudioHelper */ \"./src/lib/audio/AudioHelper.ts\");\r\nvar Audio = /** @class */ (function () {\r\n    function Audio(filename, options) {\r\n        window.AudioContext =\r\n            window.AudioContext || window.webkitAudioContext;\r\n        this.filename = filename;\r\n        this.helper = options && options.helper ? options.helper : false;\r\n        this.sizeFFT = options && options.sizeFFT ? options.sizeFFT : 64;\r\n        try {\r\n            this.audioContext = new AudioContext();\r\n        }\r\n        catch (e) {\r\n            alert(\"Web Audio API is not supported in this browser\");\r\n        }\r\n        this.audioHelper = new AudioHelper_1.AudioHelper();\r\n        window.addEventListener(\"load\", this.loadAudio.bind(this), false);\r\n    }\r\n    Audio.prototype.loadAudio = function () {\r\n        var _this = this;\r\n        if (this.audioContext) {\r\n            var audio_1 = this.audioContext;\r\n            var request_1 = new XMLHttpRequest();\r\n            request_1.open(\"GET\", this.filename, true);\r\n            request_1.responseType = \"arraybuffer\";\r\n            request_1.onload = function () {\r\n                audio_1.decodeAudioData(request_1.response, function (buffer) {\r\n                    // Create analyser\r\n                    var analyser = audio_1.createAnalyser();\r\n                    var frequencyData = new Uint8Array(analyser.frequencyBinCount);\r\n                    analyser.fftSize = _this.sizeFFT;\r\n                    var source = audio_1.createBufferSource();\r\n                    source.buffer = buffer;\r\n                    source.connect(analyser);\r\n                    source.connect(audio_1.destination);\r\n                    source.start(0);\r\n                    // Animation element with frequency\r\n                    var renderFrame = function () {\r\n                        analyser.getByteFrequencyData(frequencyData);\r\n                        // console.log(\r\n                        //     `scale(${1 + (frequencyData[5] * 100) / 256 / 200})`\r\n                        // );\r\n                        // Create Helper\r\n                        if (_this.helper) {\r\n                            _this.audioHelper.renderHelper(frequencyData, analyser.frequencyBinCount);\r\n                        }\r\n                        requestAnimationFrame(renderFrame);\r\n                    };\r\n                    renderFrame();\r\n                });\r\n            };\r\n            request_1.send();\r\n        }\r\n    };\r\n    return Audio;\r\n}());\r\nexports.Audio = Audio;\r\n\n\n//# sourceURL=webpack:///./src/lib/audio/Audio.ts?");

/***/ }),

/***/ "./src/lib/audio/AudioHelper.ts":
/*!**************************************!*\
  !*** ./src/lib/audio/AudioHelper.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AudioHelper = /** @class */ (function () {\r\n    function AudioHelper() {\r\n        this.widthHelper = 150;\r\n        this.heightHelper = 70;\r\n    }\r\n    AudioHelper.prototype.createHelper = function () {\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.canvas.setAttribute(\"width\", this.widthHelper.toString());\r\n        this.canvas.setAttribute(\"height\", this.heightHelper.toString());\r\n        this.canvas.style.position = \"absolute\";\r\n        this.canvas.style.zIndex = \"2\";\r\n        this.canvas.style.top = \"0\";\r\n        this.canvas.style.left = \"0\";\r\n        document.body.appendChild(this.canvas);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n    };\r\n    AudioHelper.prototype.renderHelper = function (datas, bufferLength) {\r\n        if (this.ctx === undefined)\r\n            this.createHelper();\r\n        var width = this.canvas.width;\r\n        var height = this.canvas.height;\r\n        var barWidth = this.canvas.width / bufferLength;\r\n        var x = 0;\r\n        if (this.ctx) {\r\n            this.ctx.fillStyle = \"#000\";\r\n            this.ctx.fillRect(0, 0, width, height);\r\n            for (var i = 0; i < bufferLength; i++) {\r\n                var barHeight = -(datas[i] / 5);\r\n                this.ctx.fillStyle = \"white\";\r\n                this.ctx.fillRect(x, this.canvas.height, barWidth, barHeight);\r\n                x += barWidth + 1;\r\n            }\r\n        }\r\n    };\r\n    return AudioHelper;\r\n}());\r\nexports.AudioHelper = AudioHelper;\r\n\n\n//# sourceURL=webpack:///./src/lib/audio/AudioHelper.ts?");

/***/ }),

/***/ "./src/lib/camera/Camera.ts":
/*!**********************************!*\
  !*** ./src/lib/camera/Camera.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar gl_matrix_1 = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/index.js\");\r\nvar Camera = /** @class */ (function () {\r\n    function Camera(program, gl) {\r\n        this.position = { x: 0, y: 0, z: 5 };\r\n        this.rotate = { x: 0, y: 0, z: 0 };\r\n        this.uWMatrix = gl_matrix_1.mat4.create();\r\n        this.cMatrix = gl_matrix_1.mat4.create();\r\n    }\r\n    Camera.prototype.setPosition = function (position) {\r\n        this.position = position;\r\n    };\r\n    Camera.prototype.renderCamera = function () {\r\n        gl_matrix_1.mat4.identity(this.cMatrix);\r\n        this.calculateRotation();\r\n        this.calculatePosition();\r\n        gl_matrix_1.mat4.invert(this.uWMatrix, this.cMatrix);\r\n    };\r\n    Camera.prototype.calculatePosition = function () {\r\n        // FIXME: Convert unity\r\n        gl_matrix_1.mat4.translate(this.cMatrix, this.cMatrix, [\r\n            this.position.x,\r\n            this.position.y,\r\n            this.position.z\r\n        ]);\r\n    };\r\n    Camera.prototype.calculateRotation = function () {\r\n        // FIXME: Convert unity\r\n        gl_matrix_1.mat4.rotateX(this.cMatrix, this.cMatrix, this.rotate.x);\r\n        gl_matrix_1.mat4.rotateY(this.cMatrix, this.cMatrix, this.rotate.y);\r\n    };\r\n    return Camera;\r\n}());\r\nexports.Camera = Camera;\r\n\n\n//# sourceURL=webpack:///./src/lib/camera/Camera.ts?");

/***/ }),

/***/ "./src/lib/geometry/Mesh.ts":
/*!**********************************!*\
  !*** ./src/lib/geometry/Mesh.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar gl_matrix_1 = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/index.js\");\r\nvar Mesh = /** @class */ (function () {\r\n    function Mesh(program, gl, geometry, indices, options) {\r\n        this.gl = gl;\r\n        this.geometry = geometry;\r\n        this.program = program;\r\n        this.matrix = gl_matrix_1.mat4.create();\r\n        this.indices = indices;\r\n        this.position = { x: 0, y: 0, z: 0 };\r\n        this.rotate = { x: 0, y: 0, z: 0 };\r\n        this.color =\r\n            options && options.color\r\n                ? [\r\n                    options.color.r,\r\n                    options.color.g,\r\n                    options.color.g,\r\n                    options.color.a\r\n                ]\r\n                : [0.4, 0.4, 0.5, 1.0];\r\n        this.wireframe =\r\n            options && options.wireframe !== undefined\r\n                ? options.wireframe\r\n                : true;\r\n        // Inialization Shader\r\n        this.uColor = this.gl.getUniformLocation(this.program, \"uColor\");\r\n        this.aPosition = this.gl.getAttribLocation(this.program, \"aPosition\");\r\n        // Load Buffer\r\n        this.loadBuffer(this.geometry);\r\n        this.loadIndices(this.indices);\r\n    }\r\n    Mesh.prototype.renderObject = function () {\r\n        var type = this.wireframe ? this.gl.LINES : this.gl.TRIANGLES;\r\n        // Vertices Geometry\r\n        if (this.aPosition == 0 && this.aPosition !== undefined) {\r\n            this.gl.vertexAttribPointer(0, 3, this.gl.FLOAT, false, 0, 0);\r\n            this.gl.enableVertexAttribArray(this.aPosition);\r\n        }\r\n        // Indices Geometry\r\n        if (this.indices && this.indices.length > 0) {\r\n            this.gl.drawElements(type, this.indices.length, this.gl.UNSIGNED_SHORT, 0);\r\n        }\r\n        else {\r\n            this.gl.drawArrays(type, 0, this.geometry.length / 3);\r\n        }\r\n        // Color Geometry\r\n        this.gl.uniform4fv(this.uColor, this.color);\r\n    };\r\n    Mesh.prototype.loadBuffer = function (geometry) {\r\n        var buffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(geometry), this.gl.STATIC_DRAW);\r\n    };\r\n    Mesh.prototype.loadIndices = function (indices) {\r\n        if (indices && indices.length > 0) {\r\n            var bufferIndices = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferIndices);\r\n            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\r\n        }\r\n    };\r\n    Mesh.prototype.getPosition = function (matrixCamera) {\r\n        this.matrix = gl_matrix_1.mat4.translate(matrixCamera, matrixCamera, [\r\n            this.position.x,\r\n            this.position.y,\r\n            this.position.z\r\n        ]);\r\n        this.matrix = gl_matrix_1.mat4.rotateY(this.matrix, this.matrix, this.rotate.y);\r\n        this.matrix = gl_matrix_1.mat4.rotateX(this.matrix, this.matrix, this.rotate.x);\r\n        return this.matrix;\r\n    };\r\n    return Mesh;\r\n}());\r\nexports.Mesh = Mesh;\r\n\n\n//# sourceURL=webpack:///./src/lib/geometry/Mesh.ts?");

/***/ }),

/***/ "./src/lib/helpers/axis.ts":
/*!*********************************!*\
  !*** ./src/lib/helpers/axis.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Axis = /** @class */ (function () {\r\n    function Axis(dimensions) {\r\n        this.dimension = dimensions || 50;\r\n        this.geometry = [\r\n            -10,\r\n            0.0,\r\n            0.0,\r\n            10,\r\n            0.0,\r\n            0.0,\r\n            0.0,\r\n            -10 / 2,\r\n            0.0,\r\n            0.0,\r\n            10 / 2,\r\n            0.0,\r\n            0.0,\r\n            0.0,\r\n            -10,\r\n            0.0,\r\n            0.0,\r\n            10\r\n        ];\r\n        this.indices = [0, 1, 2, 3, 4, 5];\r\n    }\r\n    Axis.prototype.build = function () {\r\n        this.geometry = [\r\n            -this.dimension,\r\n            0.0,\r\n            0.0,\r\n            this.dimension,\r\n            0.0,\r\n            0.0,\r\n            0.0,\r\n            -this.dimension / 2,\r\n            0.0,\r\n            0.0,\r\n            this.dimension / 2,\r\n            0.0,\r\n            0.0,\r\n            0.0,\r\n            -this.dimension,\r\n            0.0,\r\n            0.0,\r\n            this.dimension\r\n        ];\r\n    };\r\n    return Axis;\r\n}());\r\nexports.Axis = Axis;\r\n\n\n//# sourceURL=webpack:///./src/lib/helpers/axis.ts?");

/***/ }),

/***/ "./src/lib/helpers/floor.ts":
/*!**********************************!*\
  !*** ./src/lib/helpers/floor.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Floor = /** @class */ (function () {\r\n    function Floor(options) {\r\n        this.dimension =\r\n            options && options.dimensions ? options.dimensions : 50;\r\n        this.lines = options && options.lines ? options.lines : 50;\r\n        this.geometry = [];\r\n        this.indices = [];\r\n    }\r\n    Floor.prototype.build = function () {\r\n        var inc = (2 * this.dimension) / this.lines;\r\n        var v = [];\r\n        var i = [];\r\n        for (var l = 0; l <= this.lines; l++) {\r\n            v[6 * l] = -this.dimension;\r\n            v[6 * l + 1] = 0;\r\n            v[6 * l + 2] = -this.dimension + l * inc;\r\n            v[6 * l + 3] = this.dimension;\r\n            v[6 * l + 4] = 0;\r\n            v[6 * l + 5] = -this.dimension + l * inc;\r\n            v[6 * (this.lines + 1) + 6 * l] = -this.dimension + l * inc;\r\n            v[6 * (this.lines + 1) + 6 * l + 1] = 0;\r\n            v[6 * (this.lines + 1) + 6 * l + 2] = -this.dimension;\r\n            v[6 * (this.lines + 1) + 6 * l + 3] = -this.dimension + l * inc;\r\n            v[6 * (this.lines + 1) + 6 * l + 4] = 0;\r\n            v[6 * (this.lines + 1) + 6 * l + 5] = this.dimension;\r\n            i[2 * l] = 2 * l;\r\n            i[2 * l + 1] = 2 * l + 1;\r\n            i[2 * (this.lines + 1) + 2 * l] = 2 * (this.lines + 1) + 2 * l;\r\n            i[2 * (this.lines + 1) + 2 * l + 1] =\r\n                2 * (this.lines + 1) + 2 * l + 1;\r\n        }\r\n        this.geometry = v;\r\n        this.indices = i;\r\n    };\r\n    return Floor;\r\n}());\r\nexports.Floor = Floor;\r\n\n\n//# sourceURL=webpack:///./src/lib/helpers/floor.ts?");

/***/ }),

/***/ "./src/lib/renderer/Renderer.ts":
/*!**************************************!*\
  !*** ./src/lib/renderer/Renderer.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RendererDOM_1 = __webpack_require__(/*! ./RendererDOM */ \"./src/lib/renderer/RendererDOM.ts\");\r\nvar Render = /** @class */ (function () {\r\n    function Render(options) {\r\n        this.background =\r\n            options && options.background\r\n                ? options.background\r\n                : {\r\n                    r: 0.5,\r\n                    g: 0.6,\r\n                    b: 0.4,\r\n                    a: 1.0\r\n                };\r\n        var width = options && options.width ? options.width : undefined;\r\n        var height = options && options.height ? options.height : undefined;\r\n        this.rendererDOM = new RendererDOM_1.RendererDOM(width, height);\r\n        this.uPMatrixLocation = this.rendererDOM.gl.getUniformLocation(this.rendererDOM.program, \"uWMatrix\");\r\n    }\r\n    Render.prototype.setBackground = function (color) {\r\n        this.background = color;\r\n    };\r\n    Render.prototype.getGLContext = function () {\r\n        return this.rendererDOM.gl;\r\n    };\r\n    Render.prototype.getGLProgram = function () {\r\n        return this.rendererDOM.program;\r\n    };\r\n    Render.prototype.render = function (camera, scene) {\r\n        this.rendererDOM.gl.clearColor(this.background.r, this.background.g, this.background.b, this.background.a);\r\n        this.rendererDOM.gl.clear(this.rendererDOM.gl.COLOR_BUFFER_BIT);\r\n        this.rendererDOM.gl.viewport(0, 0, this.rendererDOM.width, this.rendererDOM.height);\r\n        // Render Scene\r\n        scene.render(this.rendererDOM.width, this.rendererDOM.height);\r\n        var objects = scene.getObjectsOfScene();\r\n        for (var i = 0; i < objects.length; i++) {\r\n            camera.renderCamera();\r\n            objects[i].renderObject();\r\n            var positionObject = objects[i].getPosition(camera.uWMatrix);\r\n            this.rendererDOM.gl.uniformMatrix4fv(this.uPMatrixLocation, false, positionObject);\r\n        }\r\n    };\r\n    return Render;\r\n}());\r\nexports.Render = Render;\r\n\n\n//# sourceURL=webpack:///./src/lib/renderer/Renderer.ts?");

/***/ }),

/***/ "./src/lib/renderer/RendererDOM.ts":
/*!*****************************************!*\
  !*** ./src/lib/renderer/RendererDOM.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RendererDOM = /** @class */ (function () {\r\n    function RendererDOM(widthRender, heightRender) {\r\n        this.canResize = widthRender && heightRender ? false : true;\r\n        this.width = widthRender || window.innerWidth;\r\n        this.height = heightRender || window.innerHeight;\r\n        this.init(this.width, this.height);\r\n        this.initShader();\r\n        this.initProgram();\r\n        this.initEventDOM();\r\n    }\r\n    RendererDOM.prototype.initEventDOM = function () {\r\n        var _this = this;\r\n        if (this.canResize) {\r\n            window.addEventListener(\"resize\", function (event) {\r\n                _this.width = window.innerWidth;\r\n                _this.height = window.innerHeight;\r\n                _this.canvas.width = _this.width;\r\n                _this.canvas.height = _this.height;\r\n            });\r\n        }\r\n    };\r\n    RendererDOM.prototype.init = function (width, height) {\r\n        var canvasToInsert = document.createElement(\"canvas\");\r\n        canvasToInsert.setAttribute(\"id\", \"scene\");\r\n        canvasToInsert.setAttribute(\"width\", width.toString());\r\n        canvasToInsert.setAttribute(\"height\", height.toString());\r\n        document.querySelector(\"body\").appendChild(canvasToInsert);\r\n        var canvas = document.querySelector(\"canvas\");\r\n        if (canvas) {\r\n            this.canvas = canvas;\r\n            this.gl = this.canvas.getContext(\"webgl\");\r\n        }\r\n    };\r\n    RendererDOM.prototype.initShader = function () {\r\n        var _this = this;\r\n        var shader = function (id, type) {\r\n            var shaderCreated;\r\n            var shaderScript = document.getElementById(id);\r\n            if (shaderScript === undefined || shaderScript === null) {\r\n                console.log(\"Your Shader Script is undefined\");\r\n                return;\r\n            }\r\n            if (type === \"vertex\") {\r\n                shaderCreated = _this.gl.createShader(_this.gl.VERTEX_SHADER);\r\n            }\r\n            else {\r\n                shaderCreated = _this.gl.createShader(_this.gl.FRAGMENT_SHADER);\r\n            }\r\n            if (shaderCreated && shaderScript.textContent) {\r\n                _this.gl.shaderSource(shaderCreated, shaderScript.textContent);\r\n                _this.gl.compileShader(shaderCreated);\r\n                var shaderVextexStatus = _this.gl.getShaderParameter(shaderCreated, _this.gl.COMPILE_STATUS);\r\n                console.log(type, shaderVextexStatus);\r\n                return shaderCreated;\r\n            }\r\n            else {\r\n                console.log(\"Warning\");\r\n            }\r\n        };\r\n        this.vertexShader = shader(\"vertex\", \"vertex\");\r\n        this.fragmentShader = shader(\"fragment\", \"fragment\");\r\n    };\r\n    RendererDOM.prototype.initProgram = function () {\r\n        if (this.vertexShader && this.fragmentShader) {\r\n            this.program = this.gl.createProgram();\r\n            this.gl.attachShader(this.program, this.vertexShader);\r\n            this.gl.attachShader(this.program, this.fragmentShader);\r\n            this.gl.linkProgram(this.program);\r\n            this.gl.useProgram(this.program);\r\n        }\r\n    };\r\n    return RendererDOM;\r\n}());\r\nexports.RendererDOM = RendererDOM;\r\n\n\n//# sourceURL=webpack:///./src/lib/renderer/RendererDOM.ts?");

/***/ }),

/***/ "./src/lib/scene/Scene.ts":
/*!********************************!*\
  !*** ./src/lib/scene/Scene.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar gl_matrix_1 = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/index.js\");\r\nvar Scene = /** @class */ (function () {\r\n    function Scene(program, gl, options) {\r\n        this.objects = [];\r\n        this.uPMatrix = [];\r\n        this.program = program;\r\n        this.gl = gl;\r\n        this.angle = options && options.angle ? options.angle : 45;\r\n        this.zNear = options && options.zNear ? options.zNear : 1;\r\n        this.zFar = options && options.zFar ? options.zFar : 1000;\r\n        this.uPMatrixLocation = this.gl.getUniformLocation(this.program, \"uPMatrix\");\r\n    }\r\n    Scene.prototype.add = function (obj) {\r\n        this.objects.push(obj);\r\n    };\r\n    Scene.prototype.render = function (width, height) {\r\n        this.createMatrix(width, height);\r\n        this.gl.uniformMatrix4fv(this.uPMatrixLocation, false, this.uPMatrix);\r\n    };\r\n    Scene.prototype.getObjectsOfScene = function () {\r\n        return this.objects;\r\n    };\r\n    Scene.prototype.createMatrix = function (width, height) {\r\n        var aspect = width / height;\r\n        this.uPMatrix = gl_matrix_1.mat4.perspective(gl_matrix_1.mat4.create(), this.angle, aspect, this.zNear, this.zFar);\r\n    };\r\n    return Scene;\r\n}());\r\nexports.Scene = Scene;\r\n\n\n//# sourceURL=webpack:///./src/lib/scene/Scene.ts?");

/***/ }),

/***/ "./src/lib/utils/color.ts":
/*!********************************!*\
  !*** ./src/lib/utils/color.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Color = /** @class */ (function () {\r\n    function Color() {\r\n    }\r\n    Color.convertHexToRGB = function (hex) {\r\n        var hexValue = hex.replace(\"#\", \"\");\r\n        var colorConverted = { r: 0, g: 0, b: 0, a: 1 };\r\n        var size = hexValue.length;\r\n        if (size === 3) {\r\n            // #ff0\r\n            colorConverted.r =\r\n                parseInt(hexValue.charAt(0) + hexValue.charAt(0), 16) / 255;\r\n            colorConverted.g =\r\n                parseInt(hexValue.charAt(1) + hexValue.charAt(1), 16) / 255;\r\n            colorConverted.b =\r\n                parseInt(hexValue.charAt(2) + hexValue.charAt(2), 16) / 255;\r\n            return colorConverted;\r\n        }\r\n        else if (size === 6) {\r\n            // #ff0000\r\n            colorConverted.r =\r\n                parseInt(hexValue.charAt(0) + hexValue.charAt(1), 16) / 255;\r\n            colorConverted.g =\r\n                parseInt(hexValue.charAt(2) + hexValue.charAt(3), 16) / 255;\r\n            colorConverted.b =\r\n                parseInt(hexValue.charAt(4) + hexValue.charAt(5), 16) / 255;\r\n            return colorConverted;\r\n        }\r\n        return colorConverted;\r\n    };\r\n    return Color;\r\n}());\r\nexports.Color = Color;\r\nexports.default = new Color();\r\n\n\n//# sourceURL=webpack:///./src/lib/utils/color.ts?");

/***/ })

/******/ });